<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>mongodb数据库安装-MAC</title>
      <link href="/2019/01/01/mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85-MAC/"/>
      <url>/2019/01/01/mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85-MAC/</url>
      <content type="html"><![CDATA[<h1 id="MAC-环境下安装-mongodb-数据库"><a href="#MAC-环境下安装-mongodb-数据库" class="headerlink" title="MAC 环境下安装 mongodb 数据库"></a>MAC 环境下安装 mongodb 数据库</h1><ul><li>在Mac 环境下， 安装什么东西好像都特别简单</li><li><code>mongodb</code> 也是不例外， 安装起来也是特别的简单方便</li><li>接下来我们就提供几种安装的方式</li></ul><h2 id="安装-mongodb-方式一"><a href="#安装-mongodb-方式一" class="headerlink" title="安装 mongodb 方式一"></a>安装 mongodb 方式一</h2><ul><li>如果你的电脑有 <code>homebrew</code> 那就再简单不过了<ul><li><code>homebrew</code> 就是 mac 环境下最简单的安装一些软件的工具</li><li>就好像我们在前端使用 <code>npm</code> 安装一些依赖一样</li><li><code>homebrew</code> 就可以在 mac 环境下快速安装一些软件</li></ul></li><li>如果你的电脑没有 <code>homebrew</code> 那么建议你安装一个<ul><li>安装 <code>homebrew</code> 需要一个比较好的网络环境</li><li>因为文件比较大， 并且地址在国外</li><li>还有一个问题就是需要一个 <code>xcode</code> 环境</li></ul></li><li>如果你的电脑没有 <code>xcode</code> 环境怎么办<ul><li>没有关系， 因为在安装 <code>homebrew</code> 的时候会直接帮你安装</li><li>我们只是需要在安装 <code>homebrew</code> 的过程中时常关注一下就好</li></ul></li><li>接下来就说一下 <code>homebrew</code> 的安装方式</li></ul><h3 id="homebrew-的安装方式"><a href="#homebrew-的安装方式" class="headerlink" title="homebrew 的安装方式"></a>homebrew 的安装方式</h3><ol><li>打开你的终端</li><li><p>输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure></li><li><p>他会需要你输入一个密码， 就是你的开机密码</p><ul><li>在你输入的时候， 你会看到终端上什么都没显示</li><li>好像没有输入一样， 不用担心， 他就是不显示出来的</li><li>你只要照常输入， 输入完毕后按下回车键就好了</li></ul></li><li>漫长的等待过程<ul><li>什么也不用管， 他会自己安装好的</li><li>如果你没有 <code>xcode</code> 环境， 那么你就时常关注</li><li>中间他会提示你安装 <code>xcode</code></li></ul></li></ol><h3 id="mongodb-安装"><a href="#mongodb-安装" class="headerlink" title="mongodb 安装"></a>mongodb 安装</h3><ul><li>说了一堆的废话， 终于可以进入到正题了， 安装 <code>mongodb</code></li><li>有了 <code>homebrew</code> 以后， 我们就直接安装就好了</li><li>因为最近 <code>mongodb</code> 有了自己的镜像源地址</li><li>我们不能直接使用 <code>homebrew</code> 安装了，需要配置一下地址</li><li>不用担心，很简单的<ul><li>打开终端</li><li>输入指令 <code>$ brew tap mongodb/brew</code></li><li>按下回车就好了</li><li>这个不会影响你用 <code>homebrew</code> 安装别的软件</li><li>只是添加一个下载 <code>mongodb</code> 的新的镜像源地址</li></ul></li><li>修改过镜像源地址以后， 就可以使用 <code>homebrew</code> 安装了<ul><li>打开终端</li><li>输入指令 <code>$ brew install mongodb-community@4.0</code></li><li>按下回车， 等待就好了</li><li>一段时间以后， 你的 <code>mongodb</code> 就安装好了</li></ul></li><li>注意： <strong>目前不建议安装 4.2 版本的， 因为都是坑</strong><ul><li>安装一个 4.0 版本的够用就可以了</li></ul></li><li>使用 <code>homebrew</code> 安装 <code>mongodb</code> 可以参考下面文档<ul><li><a href="https://github.com/mongodb/homebrew-brew">参考文档</a></li></ul></li><li>至此， <code>mongodb</code> 数据库已经安装完毕了</li><li>使用 <code>homebrew</code> 安装完毕以后<ul><li>我们必须要清楚我们的 <code>mongodb</code> 安装在了哪里</li><li>不然后期我们使用的时候就会麻烦了</li></ul></li></ul><h3 id="mongodb-安装在了哪里"><a href="#mongodb-安装在了哪里" class="headerlink" title="mongodb 安装在了哪里"></a>mongodb 安装在了哪里</h3><ul><li>安装在了 <code>/usr/local/Cellar</code> 这个目录下<ul><li><code>/usr</code> 这个目录在电脑里面看不到</li><li>我们直接在电脑桌面按下 <code>command + shift + g</code></li><li>输入 <code>/usr/local</code> 按下回车， 就可以</li></ul></li><li>然后我们就可以看到 <code>Cellar</code> 文件夹了， 点进去就好<ul><li>这个文件夹是 <code>homebrew</code> 安装软件的文件夹</li><li>你使用 <code>homebrew</code> 安装的软件都在这里</li></ul></li><li>接下来有一个叫做 <code>mongodbxxxxx</code> 后面记不清了<ul><li>总之就是一个很长的名字，这个文件夹名字太长了</li><li>不利于我们使用， 修改成 <code>mongodb</code> 或者什么的都行</li><li>就是为了方便使用， 没有什么大事</li></ul></li><li>我们的 <code>mongodb</code> 就安装在了这里</li></ul>]]></content>
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb 数据库 </tag>
            
            <tag> mongodb 数据库安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git的常用指令</title>
      <link href="/2018/04/10/git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/04/10/git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="git中我们经常用到的一些指令"><a href="#git中我们经常用到的一些指令" class="headerlink" title="git中我们经常用到的一些指令"></a>git中我们经常用到的一些指令</h1>]]></content>
      
      <categories>
          
          <category> Development Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git和github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github的常用功能介绍</title>
      <link href="/2018/04/10/github%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/04/10/github%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="github详解"><a href="#github详解" class="headerlink" title="github详解"></a>github详解</h1><h2 id="仓库相关（repository）"><a href="#仓库相关（repository）" class="headerlink" title="仓库相关（repository）"></a>仓库相关（repository）</h2><ul><li>点击开某一个仓库我们能看到的一些按钮的功能介绍</li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ul><li>显示显示该仓库的文件列表，以及该仓库的简单说明和URL<br><img src="/img/git/github介绍/github介绍001.png" alt="github介绍001"></li></ul><h3 id="Lssues"><a href="#Lssues" class="headerlink" title="Lssues"></a>Lssues</h3><ul><li>关于此项目的问题讨论处，遇到的问题可以在这里谈论<br><img src="/img/git/github介绍/github介绍002.png" alt="github介绍002"></li></ul><h3 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h3><ul><li>发起 pull request 给原仓库，让他看到你修改的 bug(需要先fork一份原仓库，然后修复里面的bug，在 pull request 给原仓库)<br><img src="/img/git/github介绍/github介绍003.png" alt="github介绍003"></li></ul>]]></content>
      
      <categories>
          
          <category> Development Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git和github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebStorm安装</title>
      <link href="/2018/04/08/WebStorm%E5%AE%89%E8%A3%85/"/>
      <url>/2018/04/08/WebStorm%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="安装WebStorm编辑器"><a href="#安装WebStorm编辑器" class="headerlink" title="安装WebStorm编辑器"></a>安装WebStorm编辑器</h1><ul><li>sdsa</li></ul>]]></content>
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebStorm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue组件间通讯-父传子</title>
      <link href="/2017/06/01/Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E8%AE%AF-%E7%88%B6%E4%BC%A0%E5%AD%90/"/>
      <url>/2017/06/01/Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E8%AE%AF-%E7%88%B6%E4%BC%A0%E5%AD%90/</url>
      <content type="html"><![CDATA[<h1 id="Vue组件间通讯-父传子（Props-Down）"><a href="#Vue组件间通讯-父传子（Props-Down）" class="headerlink" title="Vue组件间通讯-父传子（Props Down）"></a>Vue组件间通讯-父传子（Props Down）</h1><ul><li>概念就不在解释了，直接上干货</li></ul><h2 id="什么是父传子"><a href="#什么是父传子" class="headerlink" title="什么是父传子"></a>什么是父传子</h2><ul><li>顾名思义，就是把父组件里面的数据传递到子组件里面使用</li><li>那么我们先准备一个父组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comParent = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;我是父组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'我是父组件里面的数据'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们的目的就是把父组件里面的 <code>msg</code> 数据放到子组件里面显示</li></ul><h2 id="分析内容"><a href="#分析内容" class="headerlink" title="分析内容"></a>分析内容</h2><ul><li>因为在组件里面，每一个组件只能使用自己的数据，不能使用其他组件中的数据</li><li>不管是什么关系，都不能使用其他组件的数据</li><li>所以我们需要把数据从一个组件中传递到另一个组件中使用</li><li>在父子传递的过程中，我们先来看代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comParent = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;我是父组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;comSon&gt;&lt;/comSon&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'我是父组件里面的数据'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'com-son'</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;我是子组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们可以看到，他们两个之间有一个共通的地方，就是 <code>组件名称</code></li><li>子组件的名称，直接在父组件中被当作了标签名来使用</li><li>也就是说，有一个 <code>&lt;com-son&gt;&lt;/com-son&gt;</code>，和父组件有关系，和子组件也有关系</li><li>那么我们就可以利用这个来进行数据传递</li><li>看看下面一个图</li></ul><p><img src="/img/Vue/组件间通讯/父传子.png" alt="父传子"></p><ul><li>两个组件有一个交集，就是 <code>com-son</code> 这个名字</li></ul><h2 id="开始实现"><a href="#开始实现" class="headerlink" title="开始实现"></a>开始实现</h2><ul><li>因为 <code>&lt;com-son&gt;&lt;/com-son&gt;</code> 被写在了父组件的 <code>template</code> 里面</li><li>在这个父组件的 <code>template</code> 里面可以随便的使用父组件里面的数据</li><li>那么我们就可以用 <code>v-bind</code> 的形式，直接在标签上动态绑定一个属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comParent = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;我是父组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;comSon v-bind:data="msg"&gt;&lt;/comSon&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'我是父组件里面的数据'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'com-son'</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;我是子组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个时候，相当于给 <code>&lt;com-son&gt;&lt;/com-son&gt;</code> 这个 “标签” 添加了一个 data 属性，值就是父组件中的 <code>msg</code> 这个数据</li><li>接下来，子组件中有一个配置项，叫做 <code>props</code>，这个是专门用来读取写在自己名称标签上的属性的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comParent = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;我是父组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;comSon v-bind:data="msg"&gt;&lt;/comSon&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'我是父组件里面的数据'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'com-son'</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;我是子组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      props: [<span class="string">'data'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个 <code>props</code> 里面写的内容，就是在读取 <code>&lt;com-son&gt; &lt;/com-son&gt;</code> 这个 “标签” 上面的 <code>data</code> 属性</li><li>那么这个时候，之前在父组件里面绑定的数据，就被子组件读取出来了</li><li><code>props</code> 读取的属性也可以直接在自己的 <code>template</code> 里面使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comParent = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;我是父组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;comSon v-bind:data="msg"&gt;&lt;/comSon&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'我是父组件里面的数据'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'com-son'</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;我是子组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;&#123;&#123; data &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      props: [<span class="string">'data'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样，子组件的 p 标签中渲染的内容就是 “我是父组件里的数据”</li><li>我们的目的就达到了，把父组件里面的数据传递到子组件里面使用</li></ul><h2 id="其他使用形式"><a href="#其他使用形式" class="headerlink" title="其他使用形式"></a>其他使用形式</h2><ul><li>我们在子组件里面用 <code>props</code> 接受数据的时候</li><li>不光可以以一个数组的形式接受，也可以有别的方法，可以加上一些限制</li><li>下面我们就来简单介绍一下</li></ul><h3 id="限制数据类型"><a href="#限制数据类型" class="headerlink" title="限制数据类型"></a>限制数据类型</h3><ul><li>在子组件中使用 <code>props</code> 接受数据的时候，限制一下数据类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comParent = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'com-son'</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;我是子组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;&#123;&#123; data &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      props: &#123;</span><br><span class="line">        data: <span class="built_in">String</span>,</span><br><span class="line">        data2: &#123;</span><br><span class="line">          type: <span class="built_in">String</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data3: [<span class="built_in">String</span>, <span class="built_in">Number</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面两种书写形式，都是在限制传递过来的数据必须是 <code>字符串</code>，否则就会报错</li><li>也可以是像 <code>data3</code> 一样，多个数据类型都行</li></ul><h3 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h3><ul><li>给 <code>props</code> 要接受的数据添加一个默认值，在没有传递数据的时候生效</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comParent = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'com-son'</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;我是子组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;&#123;&#123; data &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      props: &#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="string">'我是一个默认数据'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data2: &#123;</span><br><span class="line">          type: <span class="built_in">Object</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的写法是，当你没有传递 <code>data</code> 的时候，会使用默认数据（只限于基本数据类型使用）</li><li>对于引用数据类型的默认值是要以一个工厂函数的形式返回，来设置默认值</li></ul><h3 id="必填验证"><a href="#必填验证" class="headerlink" title="必填验证"></a>必填验证</h3><ul><li>我们也可以限制父组件必须传递该数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comParent = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'com-son'</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;我是子组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;&#123;&#123; data &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      props: &#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          required: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样一来，如果父组件没有传递数据，就会报错</li></ul><h3 id="自定义验证规则"><a href="#自定义验证规则" class="headerlink" title="自定义验证规则"></a>自定义验证规则</h3><ul><li>我们也可以自定义一个验证规则，来校验传递过来的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comParent = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'com-son'</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;我是子组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;&#123;&#123; data &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      props: &#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">          type: <span class="built_in">Number</span>,</span><br><span class="line">          validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// value 就是传递过来的数据</span></span><br><span class="line">            <span class="comment">// 返回值必须是一个布尔值</span></span><br><span class="line">            <span class="keyword">return</span> value &gt;= <span class="number">100</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样一来，你传递过来的必须是一个 <code>Number</code>，并且还要大于等于 100，否则就会报错了</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>这个就是 Vue 组件间通讯的父传子</li><li>其实就是利用了子组件名称是父组件的标签这个点，来完成的内容</li><li>我的名字，你的标签，这种感觉像极了爱情！</li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue框架 </tag>
            
            <tag> Vue中的组件通讯 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>json-server的配置和使用1</title>
      <link href="/2016/04/11/json-server%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A81/"/>
      <url>/2016/04/11/json-server%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A81/</url>
      <content type="html"><![CDATA[<h1 id="JSON-SERVER"><a href="#JSON-SERVER" class="headerlink" title="JSON-SERVER"></a>JSON-SERVER</h1><ul><li>这一章主要是简单配置一下 <code>json-server</code> 临时服务器</li><li>从创建数据到 <code>json-server</code> 服务器运行</li><li>一些常见的接口 <code>API</code> 在下一章详细介绍</li></ul><h2 id="json-server-简介"><a href="#json-server-简介" class="headerlink" title="json-server 简介"></a>json-server 简介</h2><ul><li>我们在做项目的时候，经常会出现后台接口供不上使用的情况，这个时候，我们不能就是等着，不进行工作了，那么我们就需要自己做点假数据，先继续我们的项目进度，但是做假数据也是一个技术活。</li><li>我们可以选择自己本地做一个数组，在里面进行增删改查，但是这个情况下很多东西不好测试，而且将来接口一旦到位需要修改的地方太多了。</li><li>我们也可以选择自己搭建一个简单的服务器，提供一些简单的数据接口进行数据模拟，可以选择使用 <code>php</code> 进行搭建一个简单的接口进行数据模拟，因为比较方便</li><li>但是有了 <code>json-server</code> 以后，我们就可以选择使用 <code>json-server</code> 来进行数据模拟了</li><li><code>json-server</code> 就是一个 <code>node</code> 的运行模块，运行 <code>Express</code> 服务器，只需要一个 <code>json</code> 文件就可以完成一套增删改查的 <code>api</code> 接口，无需配置，操作简单</li></ul><h2 id="json-server-安装"><a href="#json-server-安装" class="headerlink" title="json-server 安装"></a>json-server 安装</h2><ul><li>你的电脑需要有一个 <code>node</code> 环境</li><li>需要你的电脑有 <code>npm</code> 或者 <code>yarn</code> 包管理器</li><li>json-server 就是一个全局包，我们直接使用 <code>npm</code> 或者 <code>yarn</code> 下载安装就行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> windows 操作系统</span><br><span class="line"><span class="meta">$</span> npm install -g json-server</span><br><span class="line"><span class="meta">$</span> yarn add global json-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> macOS 操作系统</span><br><span class="line"><span class="meta">$</span> sudo npm install -g json-server</span><br><span class="line"><span class="meta">$</span> sudo yarn add global json-server</span><br></pre></td></tr></table></figure><h2 id="json-server-启动"><a href="#json-server-启动" class="headerlink" title="json-server 启动"></a>json-server 启动</h2><ul><li><code>json-server</code> 可以直接把一个 <code>json</code> 文件托管成一个具备全 <code>RESTful</code> 风格的 <code>API</code>,并支持跨域、<code>jsonp</code>、路由订制、数据快照保存等功能的 web 服务器。</li><li>所以我们只需要准备一个 <code>json</code> 文件就可以启动 <code>json-server</code> 服务器进行接口测试了。</li><li>我们先来新建一个 <code>json</code> 文件，我这里就起名叫做 <code>db.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"students"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Jack"</span>,</span><br><span class="line">      <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Rose"</span>,</span><br><span class="line">      <span class="attr">"age"</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Tom"</span>,</span><br><span class="line">      <span class="attr">"age"</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后我们直接使用 <code>json-server</code> 启动这个 json 文件就行了</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> json-server db.json</span><br></pre></td></tr></table></figure><ul><li>启动服务以后会得到下图结果<br><img src="/img/json-server/json-server001.png" alt="json-server"></li></ul><ul><li>此时，我们使用 <code>json-server</code> 启动一个临时接口服务器已经成功了，我们可以使用 <code>json-server</code> 的接口 <code>api</code> 去请求数据了</li><li>你只要打开浏览器，访问 <code>http://localhost:3000/students</code> 就可以得到刚才写在 json 文件里面的数据了</li><li>常用的 <code>json-server</code> 接口 <code>api</code> 会在下一章详细介绍的</li></ul><h2 id="json-server-动态生成本地模拟数据"><a href="#json-server-动态生成本地模拟数据" class="headerlink" title="json-server 动态生成本地模拟数据"></a>json-server 动态生成本地模拟数据</h2><ul><li>既然我们使用了 <code>json-server</code>，那么就避免不了需要一个 <code>json</code> 文件</li><li>其实 <code>json-server</code> 也可以配合一个 <code>js</code> 文件生成一个 <code>API</code> 接口服务器</li><li>我们有的时候需要数据量比较大的时候，可以考虑自动生成一套数据，而不是自己一个一个的去写</li><li>这里，我们可以借助一个 <code>mockjs</code> 来直接生成一套模拟数据</li><li>我们创建一个 <code>js</code> 文件来生成一套数据使用，我这里就起名叫做 <code>app.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用mockjs模拟生成数据</span></span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 使用 Mock</span></span><br><span class="line">  <span class="keyword">const</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="comment">// 定义一个 student 数据组，一共生成 100 条数据</span></span><br><span class="line">    <span class="string">'student|100'</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></span><br><span class="line">        <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 定义姓名 @cname 表示中文名 @name 表示英文名</span></span><br><span class="line">        stu_name: <span class="string">'@cname'</span>,</span><br><span class="line">        autor: <span class="string">'@cname'</span>,</span><br><span class="line">        college: <span class="string">'@ctitle(6)'</span>,</span><br><span class="line">        <span class="string">'category_Id|1-6'</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'course_category|6'</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id|+1"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"pid"</span>: <span class="number">-1</span>,</span><br><span class="line">        cName: <span class="string">'@ctitle(4)'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 返回的data会作为json-server的数据</span></span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="json-server-相关启动参数"><a href="#json-server-相关启动参数" class="headerlink" title="json-server 相关启动参数"></a>json-server 相关启动参数</h2><h2 id="json-server-的路由"><a href="#json-server-的路由" class="headerlink" title="json-server 的路由"></a>json-server 的路由</h2><h2 id="json-server-自定义配置文件"><a href="#json-server-自定义配置文件" class="headerlink" title="json-server 自定义配置文件"></a>json-server 自定义配置文件</h2>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>布局方式 - flex布局</title>
      <link href="/2016/02/01/%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F-flex%E5%B8%83%E5%B1%80/"/>
      <url>/2016/02/01/%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F-flex%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h1 id="一种相当好用的布局方式-FLEX"><a href="#一种相当好用的布局方式-FLEX" class="headerlink" title="一种相当好用的布局方式 FLEX"></a>一种相当好用的布局方式 FLEX</h1><ul><li>我们传统的布局方式其实有很多种，也很好用，比如浮动布局、定位布局之类的</li><li>但是传统布局有很大的局限性，对于一些特殊的布局就不是很好实现，比如垂直居中</li><li>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</li><li>Flex布局将成为未来布局的首选方案</li></ul><h2 id="初始化一个布局方案"><a href="#初始化一个布局方案" class="headerlink" title="初始化一个布局方案"></a>初始化一个布局方案</h2><ul><li>先来准备一个基础结构，接下来如果没有特殊说明，都是使用这个基础结构</li><li><p>因为弹性布局就是一种布局方案而已，我们就直接在这个结构上面进行操作就好</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">   * &#123;</span></span><br><span class="line"><span class="undefined">     margin: 0;</span></span><br><span class="line"><span class="undefined">     padding: 0;</span></span><br><span class="line"><span class="undefined">     list-style: none;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">   </span></span><br><span class="line"><span class="undefined">   ul &#123;</span></span><br><span class="line"><span class="undefined">     width: 600px;</span></span><br><span class="line"><span class="undefined">     height: 400px;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="undefined">     margin: 100px auto;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/flex/flex000.png" alt="flex000"></p></li></ul><ul><li>这个就是一个基础结构，我们接下来将使用 <code>flex</code> 布局来对这个解构进行各种布局</li><li>这个结构就是一个简单的 <code>ul</code> 在页面横向居中，我们主要是来玩里面的 <code>li</code></li></ul><h3 id="开启弹性布局"><a href="#开启弹性布局" class="headerlink" title="开启弹性布局"></a>开启弹性布局</h3><ul><li>想要使用弹性布局，我们想要把一个元素变成一个弹性元素</li><li>我们使用 <code>display: flex;</code> 开启弹性元素</li><li>开启弹性元素需要注意的几个点：<ol><li><code>flex</code> 和 <code>block / inline-block / inline</code> 是平起平坐的关系，他们是一样的</li><li>一个元素如果是弹性元素了，就不能说他是块级元素或者什么，他就是弹性元素</li><li>开启弹性元素，不影响该元素本身在文档流中的占位关系，该元素应该怎么占位就怎么占位</li><li>与浮动定位都不冲突，该元素是浮动还是定位都不会影响，该怎么样就怎么样</li></ol></li><li><p>写了一大堆，好像都看不懂，我们先来简单的看一波占位关系</p></li><li><p>正常元素占位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">   <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span></span><br><span class="line"><span class="undefined">     </span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;&#125;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5C3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解构赋值</title>
      <link href="/2016/01/08/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
      <url>/2016/01/08/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<h1 id="ES6-语法之解构赋值"><a href="#ES6-语法之解构赋值" class="headerlink" title="ES6 语法之解构赋值"></a>ES6 语法之解构赋值</h1><ul><li>解构赋值只是一种帮我们从一个对象中获取数据的简单的书写方法而已</li><li>因为我们存储数据使用的就是对象（无序存储）和数组（有序存储），所以我们的解构赋值也就是解构 <code>对象</code> 和 <code>数组</code> 而已</li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>先来看看解构赋值的基本语法，然后我们在详细解释<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构数组</span></span><br><span class="line"><span class="keyword">var</span> [num1, num2] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log( num1 ); <span class="comment">//=&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log( num2 ); <span class="comment">//=&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [num3, ...arr] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log( num3 ); <span class="comment">//=&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log( arr ); <span class="comment">//=&gt; [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构对象</span></span><br><span class="line"><span class="keyword">var</span> &#123;str1, str2&#125; = &#123;<span class="attr">str1</span>: <span class="string">'a'</span>, <span class="attr">str2</span>: <span class="string">'b'</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( str1 ); <span class="comment">//=&gt; a</span></span><br><span class="line"><span class="built_in">console</span>.log( str2 ); <span class="comment">//=&gt; b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;str3, ...obj&#125; = &#123;<span class="attr">str1</span>: <span class="string">'a'</span>, <span class="attr">str2</span>: <span class="string">'b'</span>, <span class="attr">str3</span>: <span class="string">'c'</span>, <span class="attr">str4</span>: <span class="string">'d'</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( str3 ); <span class="comment">//=&gt; a</span></span><br><span class="line"><span class="built_in">console</span>.log( obj ); <span class="comment">//=&gt; &#123;str2: 'b', str3: 'c', str4: 'd'&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这个看起来好像很复杂，不是很看得懂，其实没有什么，只是一种规定的书写格式而已</li><li>接下来我们就一个一个的解释一下</li></ul><h2 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h2><ul><li>先来看到解构数组的语法形式</li><li>在看 <code>解构</code> 语法书之前，我们先看以前怎么获取数据的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> num1 = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> num2 = arr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> num3 = arr[<span class="number">2</span>];</span><br></pre></td></tr></table></figure></li></ul><ul><li>这个是我们以前获取数组中数据的形式</li><li>这个时候，<code>num1</code> / <code>num2</code> / <code>num3</code>，就分别代表了数组 <code>arr</code> 中的三项数据</li><li>而解构赋值就是帮我们简化了这个书写方式而已<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> [num1, num2, num3] = arr;</span><br></pre></td></tr></table></figure></li></ul><ul><li>这次写完和之前的书写形式的到的结果是一样的，只不过书写方式变了</li><li>等号左边的</li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>流程控制之循环结构</title>
      <link href="/2016/01/07/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2016/01/07/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="JS中的流程控制-之-循环结构"><a href="#JS中的流程控制-之-循环结构" class="headerlink" title="JS中的流程控制 之 循环结构"></a>JS中的流程控制 之 循环结构</h1><h2 id="什么叫流程控制"><a href="#什么叫流程控制" class="headerlink" title="什么叫流程控制"></a>什么叫流程控制</h2><ul><li>在之前有介绍过流程控制语句，在这里就不多赘述了</li><li>如不清楚，请移步 <a href="/2016/01/07/流程控制/">流程控制</a></li><li>本章主要讲解 循环结构</li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ul><li>之前聊过，循环结构就像玩游戏<ul><li>当这个页面的代码从上到下的执行的时候，就好像你在一点一点的过关</li><li>碰到一个循环结构语句的时候，就是你要打 BOSS 了，通过条件判断决定你打不打得过</li><li>打不过就回去继续练级，就是重复执行某一段代码</li><li>然后再来打 BOSS，在判断打不打得过</li><li>一直重复执行，直到满足条件了，那就那就离开循环，继续执行后面的代码，也就是打完 BOSS 以后，继续后面的关卡</li></ul></li><li>首先我们要明白，循环一定要满足几个条件，才能形成循环<ul><li>有一个初始值，也就是说，一定要有一个值来进行判断</li><li>有一个判断的条件，也就是要靠判断来决定自己是不是满足条件</li><li>重复去执行的代码块，因为循环的根本就是重复执行某一段代码</li><li>在重复执行的过程中，一定要对自己进行一些改变，不然就会一直循环下去，变成死循环了</li></ul></li><li>循环结构主要是四种语法<ul><li><code>while</code> 循环</li><li><code>do while</code> 循环</li><li><code>for</code> 循环</li><li><code>for in</code> 循环</li></ul></li><li>接下来我们就一一介绍一下四种循环方式</li></ul><h3 id="WHILE-循环"><a href="#WHILE-循环" class="headerlink" title="WHILE 循环"></a>WHILE 循环</h3><ul><li><code>while</code>，中文就是 “当…时”，也就是说，当满足什么条件的时候就做什么事</li><li>语法：<ul><li><code>while</code>：定义循环关键字</li><li><code>()</code>：定义循环中判断的条件</li><li><code>{}</code>：重复执行的代码</li></ul></li><li>先来看一下语法结构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个初始值</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 通过条件进行判断，看看是否满足条件</span></span><br><span class="line"><span class="keyword">while</span> ( num &lt; <span class="number">3</span> ) &#123;</span><br><span class="line">  <span class="comment">// 满足条件就会执行这里面的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log( num );</span><br><span class="line">  <span class="comment">// 让自己作出一些改变，这里做的就是让自身加一</span></span><br><span class="line">  num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'循环结束了'</span> )</span><br></pre></td></tr></table></figure></li></ul><ul><li>这就是一个最简单的 <code>while</code> 循环，接下来咱们来解析一下代码的执行过程<ul><li>首先，定义 <code>num</code> 的初始值为 0 </li><li>然后进入了 <code>while</code> 循环，进行条件判断，发现 <code>num &lt; 3</code> 得到的结果为 <code>true</code>，那么就会执行后面代码块中的代码</li><li>执行代码的时候，控制台会输出 <code>//=&gt; 0</code>，因为当前就为 0</li><li>最后进行改变，让自己加 1，这个时候 <code>num</code> 的值就变成 1 了</li><li>接下来就是循环了，又一次进行判断，发现 <code>num &lt; 3</code> 得到的结果为 <code>true</code>，那么就会继续执行后面代码块中的代码</li><li>执行代码的时候，控制台会输出 <code>//=&gt; 1</code>，因为经过之前的自增，<code>num</code> 已经变成 1 了</li><li>然后又进行改变，让自己加 1，这个时候 <code>num</code> 的值就变成 2 了</li><li>接下来又进行判断了，发现 <code>num &lt; 3</code> 得到的结果为 <code>true</code>，那么就会继续执行后面代码块中的代码</li><li>执行代码的时候，控制台会输出 <code>//=&gt; 2</code>，因为经过之前的自增，<code>num</code> 已经变成 2 了</li><li>然后又进行改变，让自己加 1，这个时候 <code>num</code> 的值就变成 3 了</li><li>然后又一次进行判断，发现 <code>num &lt; 3</code> 得到的结果为 <code>false</code> 了，那么就不会去执行后面代码块中的代码了</li><li>此时循环结束，继续执行循环后面的代码（此时我们进入下一关了）</li><li>最后输出 <code>//=&gt; 循环结束了</code></li></ul></li><li>这就是一个完整的循环过程了，之前说了，循环就像游戏一样，接下来给一个代码，打个 BOSS 试试<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次进入游戏，等级为 0</span></span><br><span class="line"><span class="keyword">var</span> level = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'进入第一个城市'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'准备进入第二个城市'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'见到守卫者，准备战斗'</span> );</span><br><span class="line"><span class="built_in">console</span>.log();</span><br><span class="line"><span class="keyword">while</span> ( level &lt; <span class="number">3</span> ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'没有打过，继续练级'</span> );</span><br><span class="line">  <span class="comment">// 等级上涨 1</span></span><br><span class="line">  level++;</span><br><span class="line">  <span class="built_in">console</span>.log( level + <span class="string">'级了！'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log();</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'打败 BOSS'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'进入第二个城市了'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终控制台输出结果</span></span><br><span class="line"><span class="comment">//=&gt; 进入第一个城市</span></span><br><span class="line"><span class="comment">//=&gt; 准备进入第二个城市</span></span><br><span class="line"><span class="comment">//=&gt; 见到守卫者，准备战斗</span></span><br><span class="line"><span class="comment">//=&gt;</span></span><br><span class="line"><span class="comment">//=&gt; 没有打过，继续练级</span></span><br><span class="line"><span class="comment">//=&gt; 1级了</span></span><br><span class="line"><span class="comment">//=&gt; 没有打过，继续练级</span></span><br><span class="line"><span class="comment">//=&gt; 2级了</span></span><br><span class="line"><span class="comment">//=&gt; 没有打过，继续练级</span></span><br><span class="line"><span class="comment">//=&gt; 3级了</span></span><br><span class="line"><span class="comment">//=&gt;</span></span><br><span class="line"><span class="comment">//=&gt; 打败 BOSS</span></span><br><span class="line"><span class="comment">//=&gt; 进入第二个城市了</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="DO-WHILE-循环"><a href="#DO-WHILE-循环" class="headerlink" title="DO WHILE 循环"></a>DO WHILE 循环</h3><ul><li><code>do</code>，其实就是做事的意思，其实 <code>do while</code> 和 <code>while</code> 循环基本是一样的，只不过它们的区别就是语法和执行顺序</li><li>语法：<ul><li><code>do</code>：关键字</li><li><code>{}</code>：要做什么事情，也就是我们的循环体（重复去执行的代码）</li><li><code>while</code>：关键字</li><li><code>()</code>：用来进行判断的条件</li></ul></li><li>语法结构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义初始值</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( num );</span><br><span class="line">  num++;</span><br><span class="line">&#125; <span class="keyword">while</span> ( num &lt; <span class="number">10</span> );</span><br></pre></td></tr></table></figure></li></ul><ul><li>可以看到，和 <code>while</code> 循环只有一些小差别<ol><li>因为语法关系，多了一个 <code>do</code> 关键字，并且 <code>while</code> 关键字到了最后面</li><li>要循环的代码块跑到了前面</li><li>执行的顺序发生了一些小变化，因为判断跑到和面去了，所以不管是否满足条件，都会先执行一次 <code>do</code> 后面的代码，然后在进行判断</li></ol></li><li>简单的写一个小例子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( num );</span><br><span class="line">  num++;</span><br><span class="line">&#125; <span class="keyword">while</span> ( num &lt; <span class="number">5</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'循环结束后：num = '</span> + num );</span><br><span class="line"><span class="comment">// 控制台输出结果</span></span><br><span class="line"><span class="comment">//=&gt; 10</span></span><br><span class="line"><span class="comment">//=&gt; 循环结束后：num = 11</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>可以看到，当初始值为 10 的时候，一定是不满足条件的</li><li>如果是 <code>while</code> 循环，那么一次都不会执行</li><li>可是这里是不管满足不满足条件，都先执行一次 <code>do</code> 后面的代码<ul><li>先输出一下当前的 <code>num</code> 值</li><li>然后让 <code>num</code> 自增</li><li>然后判断满足不满足条件，不满足就继续向后执行</li><li>然后执行循环体外的代码，控制台输出 <code>循环结束后：num = 11</code>，因为经过刚才的一次自增，<code>num</code> 已经变成 11 了</li></ul></li></ul><h3 id="FOR-循环"><a href="#FOR-循环" class="headerlink" title="FOR 循环"></a>FOR 循环</h3><ul><li><code>for</code> 循环在开发过程中，使用频率应该是四种循环中最多的，因为使用 <code>while</code> 循环能够做的事情都可以用 <code>for</code> 循环完成</li><li>只有 <code>do while</code> 循环可以做一些 <code>for</code> 循环不能做的事情，但只是一些特殊情况下会用到</li><li>一般来说用到循环的时候都是使用 <code>for</code> 循环</li><li><code>for</code> 循环和 <code>while</code> 循环的原理都是一样的，只不过是语法不一样而已</li><li>接下来先看一下语法结构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> num = <span class="number">0</span>; num &lt; <span class="number">3</span>; num++ ) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log( num );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'循环结束!'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="comment">//=&gt; 0</span></span><br><span class="line"><span class="comment">//=&gt; 1</span></span><br><span class="line"><span class="comment">//=&gt; 2</span></span><br><span class="line"><span class="comment">//=&gt; 循环结束!</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这个看起来比较怪异，但是其实还是按照我们之前的顺序执行的<ul><li><code>for</code>：定义循环关键字</li><li><code>()</code>：把一些定义初始值，判断，和自增写在一起了<ul><li><code>var num = 0</code>：定义初始值</li><li><code>num &lt; 3</code>：判断条件</li><li><code>num++</code>：自己发生改变，自增</li></ul></li><li><code>{}</code>：循环执行的代码块 </li></ul></li><li>在 <code>for</code> 循环中，虽然把 “初始 / 条件 / 自增” 写在了一起，但是千万不要以为他们就是按照顺序一个一个的执行了</li><li>他们依旧是按照我们之前 <code>while</code> 循环的逻辑在执行，只不过人家的语法规范定义成了这样<ul><li>依旧是先定义初始值</li><li>然后条件判断</li><li>然后决定执行还是不执行代码块里面的代码</li><li>最后自增</li></ul></li><li>使用 <code>for</code> 循环的时候，不用我们在代码块中自己来书写自增语句了，因为语法定义的时候已经写过了</li><li>其实 <code>for</code> 循环也可以进行一种变种的写法，只不过用的不多<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; num &lt; <span class="number">3</span>; ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( num );</span><br><span class="line">  num++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>这样书写其实是和之前的写法一摸一样的效果</li><li>但是千万注意，虽然这么写把一些东西从括号内提取出来了，但是括号内的 <code>;</code> 不能少</li><li>一旦少了就会报错了</li></ul><h3 id="FOR-IN-循环"><a href="#FOR-IN-循环" class="headerlink" title="FOR IN 循环"></a>FOR IN 循环</h3><ul><li>本来不想在这篇文章中介绍 <code>for in</code> 循环的，因为这个和前面三种都不一样</li><li>而且 <code>for in</code> 循环一般是用来遍历对象的</li><li>本文阅读者一般为JS基础班同学，可能不太好理解</li><li>但是还是在这里简单说一下，有个印象，后面还会详细介绍这个的</li><li>先来看看语法结构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为是遍历对象的，所以先要有一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"> name: <span class="string">'Jack'</span>,</span><br><span class="line"> age: <span class="number">18</span>,</span><br><span class="line"> gender: <span class="string">'男'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> obj ) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log( key + <span class="string">' = '</span> + obj[key] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="comment">//=&gt; name = Jack</span></span><br><span class="line"><span class="comment">//=&gt; age = 18</span></span><br><span class="line"><span class="comment">//=&gt; gender = 男</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这个 <code>for in</code> 循环一般都是用来遍历对象的<ul><li>重复执行的代码同样是后面代码块中的代码</li><li>他没有自增，因为他执行多少次取决于对象中有多少个成员，有一个成员就执行一次，两个成员就执行两次</li><li>初始化的时候定义的 <code>key</code> 就是对象中的每一个 <code>键名</code>，也就是属性名，以现在这个循环为例<ul><li>当循环第一次的时候，<code>key</code> 的值就是 <code>name</code></li><li>当循环第二次的时候，<code>key</code> 的值就是 <code>age</code></li><li>当循环第三次的时候，<code>key</code> 的值就是 <code>gender</code></li><li>就和我们之前 <code>for</code> 循环的时候的 <code>num</code> 是一样的，循环第一次的时候 <code>num = 0</code>，第二次的时候 <code>num = 1</code>…</li></ul></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>本文讲了四种循环方式</li><li>每一种都有自己的特点和使用场景，在不同的地方要自行选择<ul><li><code>while</code>：最简单的循环形式，需要自己在循环代码块中书写自增的代码</li><li><code>do while</code>：和 <code>while</code> 循环一样，只不过是不管判断成功与否，先执行一遍代码，在开始判断，同样需要在循环代码中书写自增代码</li><li><code>for</code>：和 <code>while</code> 循环类似，只不过语法形式不一样，不用自己在代码块中写自增代码</li><li><code>for in</code>：和其他三种都不一样，一般用来遍历对象时候使用</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>流程控制</title>
      <link href="/2016/01/07/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2016/01/07/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="JS中的流程控制"><a href="#JS中的流程控制" class="headerlink" title="JS中的流程控制"></a>JS中的流程控制</h1><h2 id="什么叫流程控制"><a href="#什么叫流程控制" class="headerlink" title="什么叫流程控制"></a>什么叫流程控制</h2><ul><li>流程控制：就是程序代码执行顺序</li><li>在JS中，代码的执行顺序就是 从上到下/从左到右</li><li>一般来说分成三种形式<ol><li>顺序结构</li><li>分支结构</li><li>循环结构<br><img src="/img/流程控制/流程控制001.jpeg" alt="流程控制"></li></ol></li></ul><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><ul><li>就是按照书写的顺序来执行，是程序中最基本的流程结构，也是我们执行代码时候的默认结构</li></ul><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><ul><li>分支结构，也叫选择结构/条件结构</li><li>根据给定的条件有选择的执行相应的语句</li><li>不废话，直接上图，一张图看明白<br><img src="/img/流程控制/分支结构001.png" alt="分支结构001"></li></ul><ul><li>这就是所谓的分支结构，也就是当代码执行到某一个地方的时候，出现一个分叉路口，如果满足条件走 “这边”，不满足就走 “那边”</li><li>就是根据给定的条件有选择的执行相应的语句</li><li>分支结构也分几种，不过一般都叫做分支结构<ol><li>单路分支</li><li>双路分支</li><li>多路分支</li><li>嵌套分支</li></ol></li><li>这些会在后面的文章中仔细讲解</li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul><li>在给定的条件满足的情况下，反复的执行同一段代码</li><li>根据给定的条件，不满足条件就回去 “修炼”，”修炼” 万再来判断，不满足再回去 “修炼”，直到满足条件了，再让你过去，执行后面的代码</li><li>一张图看明白循环结构<br><img src="/img/流程控制/循环结构001.jpeg" alt="循环结构"></li></ul><ul><li>这就是循环结构，其实就好像我们玩游戏，打怪升级一样，等级不够就去练级</li><li>练到高级再回来打 BOSS，打不过再去练级</li><li>直到什么时候打败 BOSS了，就能继续下一关了</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>本章旨在了解JS中的流程控制语句</li><li>会在稍后的文章中详细解释 分支结构 和 循环结构</li><li>分支结构详解请移步 <a href="/2016/01/07/流程控制之分支结构/">流程控制之分支结构</a></li><li>循环结构详解请移步 <a href="/2016/01/07/流程控制之循环结构/">流程控制之循环结构</a></li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>流程控制之分支结构</title>
      <link href="/2016/01/07/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2016/01/07/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="JS中的流程控制-之-分支结构"><a href="#JS中的流程控制-之-分支结构" class="headerlink" title="JS中的流程控制 之 分支结构"></a>JS中的流程控制 之 分支结构</h1><h2 id="什么叫流程控制"><a href="#什么叫流程控制" class="headerlink" title="什么叫流程控制"></a>什么叫流程控制</h2><ul><li>在之前有介绍过流程控制语句，在这里就不多赘述了</li><li>如不清楚，请移步 <a href="/2016/01/07/流程控制/">流程控制</a></li><li>本章主要讲解 分支结构</li></ul><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><ul><li>之前我们说过，分支结构其实就是当代码执行到某一个地方的时候，出现了一个条件判断，满足走 “这边”，不满足就走 “那边”</li><li>这个只是简单的介绍，之前我们还介绍过四种分支形式</li><li>接下来我们就一一介绍一下这些形式的分支结构</li></ul><h3 id="分支结构-之-单路分支"><a href="#分支结构-之-单路分支" class="headerlink" title="分支结构 之 单路分支"></a>分支结构 之 单路分支</h3><ul><li>首先要直到我们单路分支结构的语句就是 <code>if</code>，也就是如果的意思</li><li>其实就是 “满足条件” 就执行，”不满足” 就不执行</li><li>语法：<code>if () {}</code><ul><li><code>if</code>：关键字，定义条件分支</li><li><code>()</code>：条件分支的”条件”，写在这里面</li><li><code>{}</code>：满足条件后执行的代码，写在这里面</li></ul></li></ul><p> 这里就直接使用 <code>if语句</code>，我们给定一个场景（去网吧）<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定一个情景</span></span><br><span class="line"><span class="comment">// 这个 age 变量就是小明的年龄</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">17</span>;</span><br><span class="line"><span class="comment">// 小明走在去网吧的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'今天我要去网吧'</span> );</span><br><span class="line"><span class="comment">// 在网吧前台，网管要求看身份证</span></span><br><span class="line"><span class="comment">// 如果够18岁，就可以上网，不够就不能上网</span></span><br><span class="line"><span class="keyword">if</span> ( age &gt; <span class="number">18</span> ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在网吧上网'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小明走在回家的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'回家了'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码执行结果</span></span><br><span class="line"><span class="comment">//=&gt; 今天我要去网吧</span></span><br><span class="line"><span class="comment">//=&gt; 回家了</span></span><br></pre></td></tr></table></figure></p><ul><li>这个就是最简单的 “单路分支” 结构</li><li>很明显，小明的年龄不够 18 岁，那么他就没有在网吧上网，只是走到网吧，然后网管看了一眼身份证，不够十八岁，然后就回家去了</li><li>同理，如果够 18 岁，那么就会在网吧里面上网，然后才回家<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定一个情景</span></span><br><span class="line"><span class="comment">// 这个 age 变量就是小明的年龄</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="comment">// 小明走在去网吧的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'今天我要去网吧'</span> );</span><br><span class="line"><span class="comment">// 在网吧前台，网管要求看身份证</span></span><br><span class="line"><span class="comment">// 如果够18岁，就可以上网，不够就不能上网</span></span><br><span class="line"><span class="keyword">if</span> ( age &gt; <span class="number">18</span> ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在网吧上网'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小明走在回家的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'回家了'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码执行结果</span></span><br><span class="line"><span class="comment">//=&gt; 今天我要去网吧</span></span><br><span class="line"><span class="comment">//=&gt; 在网吧上网</span></span><br><span class="line"><span class="comment">//=&gt; 回家了</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这就是单路分支</li><li>一个条件，满足就执行 <code>{}</code> 里面的代码，不满足就不执行</li></ul><h3 id="分支结构-之-双路分支"><a href="#分支结构-之-双路分支" class="headerlink" title="分支结构 之 双路分支"></a>分支结构 之 双路分支</h3><ul><li>其实和单路分支差不多，只不过提供了一个条件不满足的时候执行的代码</li><li>我们使用 <code>if else</code> 语句</li><li>语法：<code>if () {} else {}</code><ul><li><code>if</code>：关键字，定义条件分支</li><li><code>()</code>：条件分支的”条件”，写在这里面</li><li><code>{}</code>：满足条件后执行的代码，写在这里面</li><li><code>else</code>：关键字，其他选项</li><li><code>{}</code>：不满足条件时执行的代码</li></ul></li></ul><p> 依旧给定一个场景，还是小明同学去网吧<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定一个情景</span></span><br><span class="line"><span class="comment">// 这个 age 变量就是小明的年龄</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">17</span>;</span><br><span class="line"><span class="comment">// 小明走在去网吧的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'今天我要去网吧'</span> );</span><br><span class="line"><span class="comment">// 在网吧前台，网管要求看身份证</span></span><br><span class="line"><span class="comment">// 如果够18岁，就可以上网</span></span><br><span class="line"><span class="keyword">if</span> ( age &gt; <span class="number">18</span> ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在网吧上网'</span> );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果之前 if 位置的条件没有满足</span></span><br><span class="line">  <span class="comment">// 就会执行 else 这里的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'换一个黑网吧上网'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小明走在回家的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'回家了'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码执行结果</span></span><br><span class="line"><span class="comment">//=&gt; 今天我要去网吧</span></span><br><span class="line"><span class="comment">//=&gt; 换一个黑网吧上网</span></span><br><span class="line"><span class="comment">//=&gt; 回家了</span></span><br></pre></td></tr></table></figure></p><ul><li>这里 if 条件没有满足，所以执行了 else 里面的代码</li><li>这个就是”双路分支”，其实就是两个行为，满足条件就是行为一，不满足就是行为二</li><li>但是要注意，if 和 else 里面的语句，只会有一个执行</li><li>只要有一个执行了，那么另一个就不会执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定一个情景</span></span><br><span class="line"><span class="comment">// 这个 age 变量就是小明的年龄</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="comment">// 小明走在去网吧的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'今天我要去网吧'</span> );</span><br><span class="line"><span class="comment">// 在网吧前台，网管要求看身份证</span></span><br><span class="line"><span class="comment">// 如果够18岁，就可以上网</span></span><br><span class="line"><span class="keyword">if</span> ( age &gt; <span class="number">18</span> ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在网吧上网'</span> );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果之前 if 位置的条件没有满足</span></span><br><span class="line">  <span class="comment">// 就会执行 else 这里的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'换一个黑网吧上网'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小明走在回家的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'回家了'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码执行结果</span></span><br><span class="line"><span class="comment">//=&gt; 今天我要去网吧</span></span><br><span class="line"><span class="comment">//=&gt; 在网吧上网</span></span><br><span class="line"><span class="comment">//=&gt; 回家了</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这就是双路分支，条件满足，就是行 if 后面 <code>{}</code> 里面的代码，条件不满足就执行 else 后面 <code>{}</code> 里面的代码</li><li>两个 <code>{}</code> 里面的代码，只会有一个执行，不可能出现两个都执行的情况</li></ul><h3 id="双路分支扩展-三元运算符"><a href="#双路分支扩展-三元运算符" class="headerlink" title="双路分支扩展 - 三元运算符"></a>双路分支扩展 - 三元运算符</h3><ul><li>双路分支就是一个判断决定两种结果</li><li>判断条件结果为 <code>true</code> 执行代码块一，结果为 <code>false</code> 执行代码块二</li><li>三元运算符就是双路分支的一种简化写法<ul><li>只是简单了双路分支写写法</li><li>但是每个代码块只能由一句代码组成</li><li>有自己固定的语法和规则</li><li>可以单独当作一个表达式来使用</li></ul></li><li>先看语法结构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line">num &lt; <span class="number">10</span> ? <span class="built_in">console</span>.log( <span class="string">'确实小于10'</span> ) : <span class="built_in">console</span>.log( <span class="string">'并不小于10'</span> );</span><br></pre></td></tr></table></figure></li></ul><ul><li>这个就是三元运算符（也叫三元表达式）</li><li>他又两个符号分割了三块区域<ul><li>由<code>?</code> 和 <code>:</code> 分割了三个区域</li><li><code>条件 ? 条件为 true 执行这句代码 : 条件为 false 执行这句代码</code></li></ul></li><li>一定要注意 <code>?</code> 前面是条件，条件的结果要么是 <code>true</code> 要么是 <code>false</code></li><li>每一个代码执行的地方一定只能执行一句代码，不能是一段代码</li><li>也可以当作表达式来使用，也就是给一个返回值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> result = num &lt; <span class="number">10</span> ? <span class="string">'确实小于10'</span> : <span class="string">'并不小于10'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li></ul><ul><li>这个就是表达式，如果条件为 <code>true</code>，就会返回字符串’确实小于10’，否则就返回字符串’并不小于10’</li></ul><h3 id="分支结构-之-多路分支"><a href="#分支结构-之-多路分支" class="headerlink" title="分支结构 之 多路分支"></a>分支结构 之 多路分支</h3><ul><li>多路分支其实就是可以设定多个条件</li><li>满足第一个条件，就执行第一段代码，不满足就去判断第二个条件，满足就执行第二段代码，不满足就去判断第 n 个条件，满足就执行第 n 段代码</li><li>我们使用 <code>if () {} else if () {} else</code> 语句，这里就用两个条件举例子</li><li>语法：<ul><li><code>if</code>：关键字，定义条件分支</li><li><code>()</code>：条件分支的”条件”，写在这里面</li><li><code>{}</code>：满足条件后执行的代码，写在这里面</li><li><code>else if</code>：关键字，定义第二个条件</li><li><code>{}</code>：满足第二个条件时执行的代码</li><li><code>else</code>：其他选项</li><li><code>{}</code>：两个条件都不满足的时候执行的代码</li></ul></li></ul><p> 还是一样的场景，小明同学去网吧，不过我们加一个条件限定，一号网吧 18 岁，二号网吧 16 岁<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定一个情景</span></span><br><span class="line"><span class="comment">// 这个 age 变量就是小明的年龄</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">15</span>;</span><br><span class="line"><span class="comment">// 小明走在去网吧的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'今天我要去网吧'</span> );</span><br><span class="line"><span class="comment">// 在网吧前台，网管要求看身份证</span></span><br><span class="line"><span class="comment">// 如果够18岁，就可以在一号网吧上网</span></span><br><span class="line"><span class="keyword">if</span> ( age &gt; <span class="number">18</span> ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在一号网吧上网'</span> );</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( age &gt; <span class="number">16</span> ) &#123;</span><br><span class="line">  <span class="comment">// 如果之前 if 位置的条件没有满足</span></span><br><span class="line">  <span class="comment">// 就会盘算 else if 这里的条件是否满足</span></span><br><span class="line">  <span class="comment">// 满足就会执行</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在二号网吧上网'</span> );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果前两个都不满足</span></span><br><span class="line">  <span class="comment">// 就会执行 else 里面的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在黑网吧上网'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小明走在回家的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'回家了'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码执行结果</span></span><br><span class="line"><span class="comment">//=&gt; 今天我要去网吧</span></span><br><span class="line"><span class="comment">//=&gt; 在黑网吧上网</span></span><br><span class="line"><span class="comment">//=&gt; 回家了</span></span><br></pre></td></tr></table></figure></p><ul><li>这个就是多路分支，其实就是增加了一个条件而已</li><li>这里一共有三个代码块，这三个代码块只会有一个执行，一旦有一个执行了，那么其他的都不会执行</li><li>当然也可以不光光有三个，可以是更多</li><li>这里还要注意一下，就是执行顺序会有影响，执行顺序是从上到下，也就是先判断第一个if条件，满足就不会判断 else if 这个条件了 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定一个情景</span></span><br><span class="line"><span class="comment">// 这个 age 变量就是小明的年龄</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="comment">// 小明走在去网吧的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'今天我要去网吧'</span> );</span><br><span class="line"><span class="comment">// 在网吧前台，网管要求看身份证</span></span><br><span class="line"><span class="comment">// 如果够18岁，就可以在一号网吧上网</span></span><br><span class="line"><span class="keyword">if</span> ( age &gt; <span class="number">18</span> ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在一号网吧上网'</span> );</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( age &gt; <span class="number">16</span> ) &#123;</span><br><span class="line">  <span class="comment">// 如果之前 if 位置的条件没有满足</span></span><br><span class="line">  <span class="comment">// 就会盘算 else if 这里的条件是否满足</span></span><br><span class="line">  <span class="comment">// 满足就会执行</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在二号网吧上网'</span> );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果前两个都不满足</span></span><br><span class="line">  <span class="comment">// 就会执行 else 里面的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在黑网吧上网'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小明走在回家的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'回家了'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码执行结果</span></span><br><span class="line"><span class="comment">//=&gt; 今天我要去网吧</span></span><br><span class="line"><span class="comment">//=&gt; 在一号网吧上网</span></span><br><span class="line"><span class="comment">//=&gt; 回家了</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>可以看到，满足了第一个 if 里面的条件，不会去判断 else if 的条件了</li><li>书写的时候一定要注意书写顺序问题，判断的时候一定要想好先判断哪个</li></ul><h3 id="分支结构-之-嵌套分支"><a href="#分支结构-之-嵌套分支" class="headerlink" title="分支结构 之 嵌套分支"></a>分支结构 之 嵌套分支</h3><ul><li>其实到这里，嵌套分支就是一个特别简单的事情了</li><li>其实就是在分支语句的执行代码块中在写一个分支语句，可以是任意类型的分支语句</li><li>没有新的语法，只不过是把一个分支语句，嵌套到另一个分支语句中<br>还是以小明同学去网吧为例子，只不过我们多一个判断，如果进去网吧以后，看看有没有钱，没钱不让上网，有钱在上网<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定一个情景</span></span><br><span class="line"><span class="comment">// 这个 age 变量就是小明的年龄</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="comment">// 这个 money 变量是小明携带的钱</span></span><br><span class="line"><span class="keyword">var</span> money = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 小明走在去网吧的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'今天我要去网吧'</span> );</span><br><span class="line"><span class="comment">// 在网吧前台，网管要求看身份证</span></span><br><span class="line"><span class="comment">// 如果够18岁，就可以上网</span></span><br><span class="line"><span class="keyword">if</span> ( age &gt; <span class="number">18</span> ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'在网吧里面，还没交钱'</span> );</span><br><span class="line">  <span class="comment">// 年龄够了以后，还要看看有没有钱</span></span><br><span class="line">  <span class="keyword">if</span> ( money &gt; <span class="number">20</span> ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'在网吧上网'</span> );</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果之前 if 位置的条件没有满足</span></span><br><span class="line">  <span class="comment">// 就会执行 else 这里的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'换一个黑网吧'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小明走在回家的路上</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'回家了'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码执行结果</span></span><br><span class="line"><span class="comment">//=&gt; 今天我要去网吧</span></span><br><span class="line"><span class="comment">//=&gt; 在网吧里面</span></span><br><span class="line"><span class="comment">//=&gt; 回家了</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这个就是嵌套分支，很简单，就是在一个分支结构里面书写另一个分支结构</li></ul><h3 id="分支结构-之-第二种语法"><a href="#分支结构-之-第二种语法" class="headerlink" title="分支结构 之 第二种语法"></a>分支结构 之 第二种语法</h3><ul><li>之前我们写的 <code>if</code> 等等之类的语句，是第一种语法</li><li>我们的分支结构还有一种语法，叫做 <code>switch</code> 语法</li><li>基本逻辑是一样的，只不过是语法不一样而已</li><li>接下来我们就说一下 <code>switch</code> 语法</li><li>先来看看长成什么样子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个用于判断的变量</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// switch 关键字，后面括号内是用于判断的表达式</span></span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">  <span class="comment">// 当被判断变量 等于 2 的时候</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="comment">// 当 表达式的值等于 2 的时候执行的代码</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">// 上面几种都不满足</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 上面的都不满足，就执行这里的代码</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>这个就是 <code>switch</code> 判断，适用于准确判断<ul><li><code>()</code> 内放一个表达式，这个表达式可以有多种情况出现</li><li><code>{}</code> 内放的是我们所有要处理的情况的代码</li><li><code>case</code> 情景，也就是说我们之前括号内有可能出现的情况</li><li><code>break</code> 每一个情景必须对应一个 <code>break</code> 不然会就会在执行当前代码以后再去执行下一个 <code>case</code> 中的代码</li><li><code>default</code> 当所有的 <code>case</code> 都不满足的时候，就会执行这里的，也可以不写</li></ul></li><li>接下来看一代代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个用于判断的变量</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// switch 关键字，后面括号内是用于判断的表达式</span></span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'我是 case = 2'</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'我是 case = 4'</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'我是 case = 6'</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'我是 case = 8'</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'我是 case = 10'</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">// 上面几种都不满足</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 上面的都不满足，就执行这里的代码</span></span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'所有的case都不满足'</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>当 <code>num = 2</code> 的时候，控制台就会输出 <code>//=&gt; 我是 case = 2</code><br>当 <code>num = 4</code> 的时候，控制台就会输出 <code>//=&gt; 我是 case = 4</code><br>当 <code>num = 6</code> 的时候，控制台就会输出 <code>//=&gt; 我是 case = 6</code><br>当 <code>num = 8</code> 的时候，控制台就会输出 <code>//=&gt; 我是 case = 8</code><br>当 <code>num = 10</code> 的时候，控制台就会输出 <code>//=&gt; 我是 case = 10</code><br>当 <code>num = 其他任意数字</code> 的时候，控制台就会输出 <code>//=&gt; 所有的case都不满足</code></p></blockquote><ul><li>这里 <code>switch</code> 分支语句中，<code>case</code> 只能准确判断某一个值，不能出现 <code>&gt; / &lt; / &gt;= / &lt;=</code> 之类的判断情况</li><li>每一个 <code>case</code> 后面必须要有 <code>break</code>，不然就会把下面一个 <code>case</code> 中的代码也执行掉</li><li>但是有的时候不写 <code>break</code> 也会有一些用处，但是要慎用</li><li>有两种情况，那么 <code>if else</code> 比较好用，如果是多个值的判断的话，那么 <code>switch</code> 是一个不错的选择</li><li>但是 <code>switch</code> 在真正的开发中，使用的频率相对较少，但是我们也要掌握</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>本章讲了 分支结构 的两种语法</li><li><code>if else</code> 语句，只会执行一个代码块，要么是 <code>if</code> 里面的，要么是 <code>else</code> 里面的<ul><li>单路分支的时候，如果 <code>{}</code> 里面只有一句代码，那么可以省略 <code>{}</code> 不写，直接写在 <code>()</code> 的后面就可以</li><li>双路分支的时候扩展了一个三元表达式，一定注意，只能执行一句代码</li><li>多路分支的时候，要注意书写的顺序，因为有的时候顺序是会影响执行结果的</li></ul></li><li><code>switch</code> 里面的 <code>case</code> 可以有任意个，但是一定要写 <code>break</code>，当如，如果业务需要也可以不写（慎用）<ul><li>最后的 <code>default</code> 可以不写，如果没有排他情况，就可以不写</li><li>最后一个 <code>case</code> 或者 <code>default</code> 结尾的 <code>break</code> 可以不写，但是为了保持格式和书写习惯，建议也写上</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>unicode字符集</title>
      <link href="/2016/01/07/unicode%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
      <url>/2016/01/07/unicode%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
      <content type="html"><![CDATA[<h1 id="unicode字符集"><a href="#unicode字符集" class="headerlink" title="unicode字符集"></a>unicode字符集</h1><ul><li>本文是一边冗长而又无聊的文章，虽然介绍了一堆东西，但是相信很多童鞋都不愿意看</li><li>没有办法，涉及到概念型的东西，就是无聊</li></ul><h2 id="unicode字符集是什么"><a href="#unicode字符集是什么" class="headerlink" title="unicode字符集是什么"></a>unicode字符集是什么</h2><ul><li>我们在讲”过去”之前，先要知道他现在是什么</li><li>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准,包括字符集、编码方案等。</li><li>Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</li><li>1990年开始研发，1994年正式公布。</li><li>我们可以简单的把它想象成一个巨大的对照表<ul><li>基本上世界上的语言（肯定有中文），每一个字符都以一个对应的”编号”</li><li>而每一个”编号”和每一个字符都是一一对应的</li><li>unicode字符集就是世界通用的计算机语言</li></ul></li><li>先简单的介绍到这里，接下来我们从起源开始聊一聊</li></ul><h2 id="unicode不得不说的故事-–-ASCII"><a href="#unicode不得不说的故事-–-ASCII" class="headerlink" title="unicode不得不说的故事 – ASCII"></a>unicode不得不说的故事 – ASCII</h2><ul><li>想要了解unicode编码，那就不得不说说 ASCII 了</li></ul><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><ul><li>ASCII码众所周知全称为“美国信息交换标准码，American Standard Code for Information Interchange”。不能不佩服美国人，我这里决不是崇洋媚外，美国人在计算机领域对人类的贡献是绝对应该被我们所牢记的，对现代人来说，这些贡献丝毫不亚于中国人的四大发明。言归正传，个人觉得了解ASCII的由来是理解ASCII码的最好方法。 </li></ul><h3 id="ASCII的背景"><a href="#ASCII的背景" class="headerlink" title="ASCII的背景"></a>ASCII的背景</h3><ul><li>人们发明了计算机，并知道如何使用内存中的0101来表示数和机器码。</li><li>但是人类最主要的信息展现形式是文本，如何用内存中的bit来表示文本一直困扰着人们，这种情况一直持续到ASCII码发明成功后才被“部分”解决。</li><li>说白了ASCII码就是解决了一个以数字形式表示文本的问题。 </li></ul><h3 id="ASCII码通讯"><a href="#ASCII码通讯" class="headerlink" title="ASCII码通讯"></a>ASCII码通讯</h3><ul><li>利用ASCII码作为通讯方式到底是一种什么样的通讯方式呢？（FTP协议中有两种通讯方式，其中一种是ASCII码方式，即文本方式）这里也举例说明：<ul><li>比如我们要传送数值123, 123数值用16进制表示为0x7b，以二进制表示为01111011，那么以二进制方式通讯，01111011就是我们真实传送的数据</li><li>但是如果以ASCII码方式通讯，则完全不同了，如果你还传送01111011的话，对方那边的得到的将是’{‘(‘{‘对应的ASCII码用16进制表示为7b)。</li><li>那么我们该如何怎么传呢？正确的方式就是将123每位上的数字转化为其相应的ASCII码，然后传送。</li><li>这里’1’、’2’和’3’对应的ASCII码用16进制表示分别为0x31、0x32和0x33。</li><li>这样组合起来后要传送的数据应为”001100010011001000110011”。 </li></ul></li></ul><h2 id="unicode起源"><a href="#unicode起源" class="headerlink" title="unicode起源"></a>unicode起源</h2><ul><li>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。</li><li>最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），0 - 255被用来表示大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。</li><li>如果要表示中文，显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。</li><li>类似的，日文和韩文等其他语言也有这个问题。为了统一所有文字的编码，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</li><li>最初的unicode编码是固定长度的，16位，也就是2两个字节代表一个字符，这样一共可以表示65536个字符。显然，这样要表示各种语言中所有的字符是远远不够的。</li><li>Unicode4.0规范考虑到了这种情况，定义了一组附加字符编码，附加字符编码采用2个16位来表示，这样最多可以定义1048576个附加字符，目前unicode4.0只定义了45960个附加字符。</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>Unicode只是一个编码规范，目前实际实现的unicode编码只要有三种：UTF-8,UCS-2和UTF-16，三种unicode字符集之间可以按照规范进行转换。</li></ul><h2 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h2><ul><li>Unicode的最初目标：<ul><li>是用1个16位的编码来为超过65000字符提供映射，但这还不够，它不能覆盖全部历史上的文字，也不能解决传输的问题(implantation head-ache’s)，尤其在那些基于网络的应用中。</li><li>因此，Unicode用一些基本的保留字符制定了三套编码方式。它们分别是UTF-8，UTF-16和UTF-32。</li><li>正如名字所示。在UTF－8中，字符是以8位序列来编码的。用一个或几个字节来表示一个字符。这种方式的最大好处。是UTF－8保留了ASCII字符的编码做为它的一部分。</li><li>例如。在UTF－8和ASCII中。“A”的编码都是0x41。UTF－16和UTF－32分别是Unicode的16位和32位编码方式。</li><li>考虑到最初的目的，通常说的Unicode就是指UTF-16。</li></ul></li><li>Unicode由UC(UNICODE协会)管理并接受其技术上的修改。包括JAVA、LDAP、XML这样的技术标准中均要求得到 Unicode 的支持。<ul><li>Unicode的字符被成为代码点（CODE POINTS），用U后面加上XXXX来表示，其中，X为16进制的字符。</li></ul></li><li>其实讲到这里就差不多了，对于一个初学者来说基本就够了<ul><li>本文参考自<a href="http://www.unicode.org/" target="_blank" rel="noopener">http://www.unicode.org/</a></li><li>有兴趣的同学可以自己在深入研究一下</li></ul></li><li>到了这里，我们看到了几个熟悉的字眼 <code>UTF－8</code>、<code>UTF－16</code><ul><li>接下来就解释几个字符集</li></ul></li></ul><h3 id="UTF－8"><a href="#UTF－8" class="headerlink" title="UTF－8"></a>UTF－8</h3><ul><li>UTF-8是一种8位的unicode字符集，编码长度是可变的，并且是ASCII字符集的严格超集，也就是说ASCII中每个字符的编码在UTF-8中是完全一样的。</li><li>UTF-8字符集中，一个字符可能是1个字节，2个字节，3个字节或者4个字节长。一般来说，欧洲的字母字符长度为1到2个字节，而亚洲的大部分字符则是3个字节，附加字符为4个字节长。</li><li>Unix平台中普遍支持UTF-8字符集，HTML和大多数浏览器也支持UTF-8，而window和java则支持UCS-2。</li><li>UTF-8的主要优点：<ul><li>对于欧洲字母字符需要较少的存储空间。</li><li>容易从ASCII字符集向UTF-8迁移。</li></ul></li></ul><h3 id="UCS-2"><a href="#UCS-2" class="headerlink" title="UCS-2"></a>UCS-2</h3><ul><li>UCS-2是固定长度为16位的unicode字符集。每个字符都是2个字节，UCS-2只支持unicode3.0，所以不支持附加字符。</li><li>UCS-2的优点：<ul><li>对于亚洲字符的存储空间需求比UTF-8少，因为每个字符都是2个字节。</li><li>处理字符的速度比UTF-8更快，因为是固定长度编码的。</li><li>对于windows和java的支持更好。</li></ul></li></ul><h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h3><ul><li>UTF-16也是一种16位编码的字符集。实际上，UTF-16就是UCS-2加上附加字符的支持，也就是符合unicode4.0规范的UCS-2。所以UTF-16是UCS-2的严格超集。</li><li>UTF-16中的字符，要么是2个字节，要么是4个字节表示的。UTF-16主要在windows2000以上版本使用。</li><li>UTF-16相对UTF-8的优点，和UCS-2是一致的。</li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ul><li>就到这里把，在说下去就疯了</li><li>之所以说这个，只是为了帮助理解一下JS中的字符串方法 <code>charCodeAt</code>，现在已经够用了</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>本文并不需要掌握什么，只要知道 unicode 是一个字符集</li><li>支持全世界各种语言就好了</li><li>我们不需要记住某个字符的编码是什么，只要知道有这么个东西，可以帮助我们做一些事情就好了</li></ul>]]></content>
      
      <categories>
          
          <category> Development Periphery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unicode字符集 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的内置对象-String的常用方法</title>
      <link href="/2016/01/07/JS%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1-String%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2016/01/07/JS%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1-String%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="JS中的内置对象-–-String的常用方法介绍"><a href="#JS中的内置对象-–-String的常用方法介绍" class="headerlink" title="JS中的内置对象 – String的常用方法介绍"></a>JS中的内置对象 – String的常用方法介绍</h1><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>在JS中给我们提供了很多API（方法），来帮助我们操作字符串，完成一些功能</li><li>接下来就介绍十几个比较常用到的方法</li></ul><h3 id="charAt-index"><a href="#charAt-index" class="headerlink" title="charAt(index)"></a>charAt(index)</h3><ul><li>这个方法是根据索引，获取对应位置的文本内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> s1 = str.charAt(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log( s1 ); <span class="comment">//=&gt; a</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>根据索引获取字符，index的取值范围就是 <code>0</code> 到 <code>length-1</code> </li><li>如果给一个小于 <code>0</code> 或者大于 <code>length-1</code> 的值，得到的是一个 “空字符串”<ul><li>注意不是什么也没有，是有东西只不过是一个空字符串</li><li>也不要写一个带小数点的数字，要写自然数（如果你写一个带小数点的数字，他是不会认识的，会默认按照小数点前面的数字进行检索）</li></ul></li></ul><h3 id="charCodeAt-index"><a href="#charCodeAt-index" class="headerlink" title="charCodeAt(index)"></a>charCodeAt(index)</h3><ul><li>这个方法和 <code>charAt</code> 类似，都是根据索引去检测对应的内容返回<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> s1 = str.charCodeAt(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log( s1 ); <span class="comment">//=&gt; 97</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>只不过 <code>charCodeAt</code> 返回的不是对应索引为值的字符，而是对应索引位置字符的 unicode 编码<ul><li>index的取值范围和 <code>charAt</code> 一样</li></ul></li><li>unicode 编码是一种字符集，这里不多解释，后面会有文章专门说这个问题<ul><li>有兴趣可以移步<a href="/2016/01/07/unicode字符集/">unicode字符集</a></li></ul></li></ul><h3 id="indexOf-searchString-startIndex"><a href="#indexOf-searchString-startIndex" class="headerlink" title="indexOf(searchString[, startIndex])"></a>indexOf(searchString[, startIndex])</h3><ul><li>这个方法是根据内容找到对应的索引返回</li><li>这个方法接收两个参数<ul><li>第一个参数：是要查询的字符</li><li>第二个参数：从哪个索引位置开始查找（可以不写，不写默认是从 0 开始查找）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcba'</span>;</span><br><span class="line"><span class="keyword">var</span> index1 = str.indexOf(<span class="string">'b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( index1 ); <span class="comment">//=&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index2 = str.indexOf(<span class="string">'d'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( index2 ); <span class="comment">//=&gt; -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index3 = str.indexOf(<span class="string">'bc'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( index3 ); <span class="comment">//=&gt; 1</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>这个就是只有一个参数的情况，会默认从索引 0 开始向右查找<ul><li>如果找到第一个参数中的字符，就会返回对应位置的索引</li><li>如果没有找到，就会返回 -1</li><li>如果是多个字符的字符串匹配的话，是完全匹配才算找到，找到就返回开始位置的索引</li></ul></li><li>indexOf这个方法只会找到一个对应的字符就结束了，不会把每一个都给找出来</li><li>indexOf的第二个参数如果写的话，需要传递一个数字<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcba'</span>;</span><br><span class="line"><span class="keyword">var</span> index1 = str.indexOf(<span class="string">'b'</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log( index1 ); <span class="comment">//=&gt; 3</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>第二个参数的意思就是从哪一个索引位置开始向右查找，不管左边的字符中有没有对应的内容</li></ul><h3 id="lastIndexOf-searchString-startIndex"><a href="#lastIndexOf-searchString-startIndex" class="headerlink" title="lastIndexOf(searchString[, startIndex])"></a>lastIndexOf(searchString[, startIndex])</h3><ul><li>和 indexOf 的用法一样，参数意思也是一样，只不过是从左往右查找</li><li>索引位置不变，该是多少还是多少，只不过是查找方式变成了从左向右<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdedcba'</span>;</span><br><span class="line"><span class="keyword">var</span> index1 = str.lastIndexOf(<span class="string">'b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( index1 ); <span class="comment">//=&gt; 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index2 = str.lastIndexOf(<span class="string">'h'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( index2 ); <span class="comment">//=&gt; -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index3 = str.lastIndexOf(<span class="string">'b'</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log( index3 ); <span class="comment">//=&gt; 1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>一定要注意，索引位置不变，只是查找的顺序变了</li><li>依旧是找到一个就行，不会所有的都找到</li><li>第二个参数就是从对应的索引位置往右找</li></ul><h3 id="substr-startIndex-length"><a href="#substr-startIndex-length" class="headerlink" title="substr([startIndex, length])"></a>substr([startIndex, length])</h3><ul><li>这个是一个抽取字符串的方法</li><li>也就是在一个字符串的基础上，从里面抽取出一些字符</li><li>两个参数（可以都不写，会有默认值）：<ul><li>第一个参数：开始的索引位置（也就是从哪个索引位置开始抽取），包含当前索引，如果不写默认是 0</li><li>第二个参数：是抽取几个字符长度的内容，如果不写默认是抽取的末尾</li></ul></li><li>这个方法的返回值就是抽取出来的新字符串，不会改变原字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr1 = str.substr();</span><br><span class="line"><span class="built_in">console</span>.log( newStr1 ); <span class="comment">//=&gt; abcdefg</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>两个参数都不传递的话，就是默认从 0 的位置开始抽取，抽取到末尾</li><li>返回的就是一个一摸一样的字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr1 = str.substr(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr1 ); <span class="comment">//=&gt; abcdefg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr2 = str.substr(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr2 ); <span class="comment">//=&gt; cdefg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr3 = str.substr(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr3 ); <span class="comment">//=&gt; g</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这个是第一个参数的几种情况，传的几就是从索引几的位置开始想后面抽取字符串</li><li>如果传递的是一个”负数”，那么表示从后往前数的位置<ul><li>这里如果传递的是负数，我们可以把它理解为 <code>str.length + (负数)</code></li><li>也就是说如果是个”负数”，那么用 <code>length</code> 减去这个数一个得到值就是索引开始的位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr1 = str.substr(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr1 ); <span class="comment">//=&gt; ab</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>第二个参数表示的是抽取的长度<ul><li>两个参数传递了以后，就表示从索引 0 的位置开始，抽取 2 个字符</li><li>返回的就是抽取出来的字符</li><li>这个参数不能是负数</li></ul></li><li>注意事项：<ul><li>ECMAScript 没有对该方法进行标准化，因此不推荐使用</li><li>在IE4中，参数 <code>start</code> 的值无效。在这个 BUG 中，<code>start</code> 规定的是第 0 个字符的位置。在之后的版本中，此 BUG 已被修正</li></ul></li></ul><h3 id="substring-startIndex-endIndex"><a href="#substring-startIndex-endIndex" class="headerlink" title="substring([startIndex, endIndex])"></a>substring([startIndex, endIndex])</h3><ul><li>其实和 <code>substr</code> 差不多，只不过是第二个参数有差异</li><li>第二个参数不再是长度了，而是抽取字符串结束的位置</li><li>返回值就是抽取出来的字符串，不会改变原字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.substring();</span><br><span class="line"><span class="built_in">console</span>.log( newStr ); <span class="comment">//=&gt; abcdefg</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>可以不传递参数，不传参的情况和 <code>substr</code> 一样，就是抽取整个字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr1 = str.substring(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr1 ); <span class="comment">//=&gt; abcdefg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr2 = str.substring(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr2 ); <span class="comment">//=&gt; defg</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> newStr3 = str.substring(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr3 ); <span class="comment">//=&gt; abcdefg</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>传递一个参数的时候，也是和 <code>substr</code> 基本一样<ul><li>因为官方要求传递的参数必须是一个非负数，所以，如果传递的是一个负数的话，那么会自动当作 0 来处理</li><li>虽然可以传递一个负数，但是不建议使用</li></ul></li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr1 = str.substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr1 ); <span class="comment">//=&gt; ab</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr2 = str.substring(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr2 ); <span class="comment">//=&gt; cde</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr3 = str.substring(<span class="number">3</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr3 ); <span class="comment">//=&gt; abc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr4 = str.substring(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr4 ); <span class="comment">//=&gt; bc</span></span><br></pre></td></tr></table></figure><ul><li>这个是第二个参数的情况<ul><li>这里和 <code>substr</code> 就有区别的，不再是长度，而是到第几个索引的位置</li><li>比如 <code>index1</code> 其实就是抽取字符串中从索引 0 抽取到索引 2 的位置，但是包含 0 不包含 2</li><li>我们叫做”包前不包后”</li><li><code>index2</code> 就是抽取从索引 2 的位置到索引 5 的位置（包含 2 不包含 5）</li></ul></li><li>这里重点要说一下 <code>index3</code> 和 <code>index4</code>，他们一个是负数，一个是正数<ul><li>他们有一个共同点，那就是都比开始索引小，在这里也就是都小于 3</li><li>官方对 <code>substring</code> 中第二个参数的定义是必须比第一个数值大的正整数</li><li>这里如果写一个比第一个参数小的数字，或者负数的或，那么在执行的时候默认是把两个参数调换一个位置执行</li><li>也就是说 <code>substring(3, -1)</code> 等价与 <code>substring(-1, 3)</code>，-1 会自动当作 0 来处理</li><li><code>substring(3, 1)</code> 等价与 <code>substring(1, 3)</code></li></ul></li><li>上面提到了几个非官方处理<ul><li>第一个参数传递一个”负数”，在执行的时候会自动当作 0 来处理</li><li>第二个参数传递一个比第一个参数小的数或者负数，在执行的时候会自动调换两个参数的位置进行执行</li><li>虽然可以这么写，但是不推荐这么使用</li></ul></li></ul><h3 id="slice-startIndex-endIndex"><a href="#slice-startIndex-endIndex" class="headerlink" title="slice([startIndex, endIndex])"></a>slice([startIndex, endIndex])</h3><ul><li>这个方法的使用基本上和 <code>substring</code> 一摸一样</li><li>返回值就是抽取出来的字符串，不会改变原字符串</li><li>唯一不同的是可以传递负数，他不会被当作 0 来处理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr1 = str.slice(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr1 ); <span class="comment">//=&gt; ab</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> newStr2 = str.slice(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr2 ); <span class="comment">//=&gt; cde</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> newStr3 = str.slice(<span class="number">3</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr3 ); <span class="comment">//=&gt; def</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr4 = str.slice(<span class="number">-3</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr4 ); <span class="comment">//=&gt; ef</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> newStr5 = str.slice(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr5 ); <span class="comment">//=&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr6 = str.slice(<span class="number">-3</span>, <span class="number">-5</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr6 ); <span class="comment">//=&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这个看上去就比较乱了，稍微解释一下就清楚了<ul><li>首先要知道的第一个问题就是，一旦出现”负数”，官方的解释是从后往前数</li><li>但是其实就是用 <code>length + (负数)</code> 得到的结果</li><li>第二个问题就是，第二个参数必须要大于第一个参数</li></ul></li><li>接下来一个一个解释一下这几个东西<ul><li><code>newStr1</code>：截取从索引 0 到索引 2 的内容（包含 0 不包含 2）</li><li><code>newStr2</code>：截取从索引 2 到索引 5 的内容（包含 2 不包含 5）</li><li><code>newStr3</code>：出现了负数，之前说过会被 <code>length</code> 加一下，也就是说两个参数变成了 3 和 6（7 + (-1)）</li><li><code>newStr4</code>：两个都是负数，和 <code>newStr3</code> 一样，两个参数会变成 4（7 + (-3)）和 6（7 + (-1)）</li><li><code>newStr5</code>：第二个参数比第一个参数小，会返回一个空字符串，因为不允许这样使用</li><li><code>newStr6</code>：先处理负数，两个参数变成了 4（7 + (-3)）和 2（7 + (-5)），依旧是第二个参数比第一个参数小，会返回空字符串</li></ul></li><li>这样是不是就比较好理解了呢<ul><li>其实说的第二个参必须大于第一个参数是指”计算后”，当然，这个”计算后”一定是有负数的情况下才会有计算</li></ul></li></ul><h3 id="split-separator-howmany"><a href="#split-separator-howmany" class="headerlink" title="split([separator, howmany])"></a>split([separator, howmany])</h3><ul><li>这个方式是分割字符串的，支持两个参数<ul><li>第一个参数：以什么方式切割字符串（这个可以不传，不传就是不分割，把字符串当成一个整体返回）</li><li>第二个参数：截取多少分出来（这个参数默认可以不传，不传就是不限制长度）</li><li>返回值：是一个数组，里面存储着被分割的每一项</li></ul></li><li>先来看一个参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = str.split();</span><br><span class="line"><span class="built_in">console</span>.log( arr1 ); <span class="comment">//=&gt; ['abcdefg']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = str.split(<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log( arr2 ); <span class="comment">//=&gt; ['a', 'b', 'c', 'd', 'e', 'f', 'g']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = str.split(<span class="string">','</span>);</span><br><span class="line"><span class="built_in">console</span>.log( arr3 ); <span class="comment">//=&gt; ['abcdefg']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr4 = str.split(<span class="string">' '</span>);</span><br><span class="line"><span class="built_in">console</span>.log( arr4 ); <span class="comment">//=&gt; ['abcdefg']</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这个是只传一个参数的情况<ul><li>如果什么都不传，那么就把整个字符串当作一个整体，不进行分割，返回的数组中只有一项，就是整个字符串</li><li>如果传递一个空字符串，那么会按照字符分割，也就是一个字符就是一项，字符串有多长，返回的数组就有多长</li><li>如果传递的是一个字符串里面没有的字符，那么就不进行分割，把整个字符串当作一个整体，返回的数组中只有一项，就是整个字符串</li></ul></li><li>第一个参数其实就是切割的方式，也就是以哪个字符为分割点，分割字符串</li><li>只有空字符串的时候是按照字符分割，每一个字符就是一份</li><li>第二个参数就是分割完数组以后，保留几份<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = str.split(<span class="string">''</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log( arr1 ); <span class="comment">//=&gt; []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = str.split(<span class="string">''</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log( arr2 ); <span class="comment">//=&gt; ['a', 'b']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = str.split(<span class="string">''</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log( arr3 ); <span class="comment">//=&gt; ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这是第二个参数的情况，上面三种都是以空字符串分割，分割出来都应该是三份<ul><li>如果第二个参数传 0：那么返回的数组中只保留 0 份</li><li>如果第二个参数传 2：那么返回的数组中只保留 2 份</li><li>如果第二个参数传 5：那么返回的数组中只保留 5 份，但是因为五份超过最大值了，所以有几份就保留几份</li></ul></li><li>其实第二个参数就是相当于，虽然你分割了字符串，但是我要求一下返回值的数组中只要几份，多余的我就不要了</li><li>如果第二个参数传递的是负数，那么没有任何意义，就相当于没有传递是一样的</li></ul><h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h3><ul><li>这个方法是将字符串中的大写字母转成小写字母，不需要参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'ABCDEFG'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.toLowerCase();</span><br><span class="line"><span class="built_in">console</span>.log( newStr ); <span class="comment">//=&gt; 'abcdefg'</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>就是把字符串中所有的大写字母都转成小写字母返回</li></ul><h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h3><ul><li>这个方法是将字符串中的小写字母转成大写字母，不需要参数</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.toLowerCase();</span><br><span class="line"><span class="built_in">console</span>.log( newStr ); <span class="comment">//=&gt; 'ABCDEFG'</span></span><br></pre></td></tr></table></figure><ul><li>就是把字符串中所有的小写字母都转成大写字母返回</li></ul><h3 id="replace-regexp-string-replacement"><a href="#replace-regexp-string-replacement" class="headerlink" title="replace(regexp/string, replacement)"></a>replace(regexp/string, replacement)</h3><ul><li>这个方法是字符串的替换，也就是用一个新的字符把原字符串中的某一项替换掉<ul><li>第一个参数：原字符串中那一项要被替换（这里可以使用字符串，也可是已使用正则），正则在这里先不说，后面文章中说到正则的时候会再说</li><li>第二个参数：替换成什么（可以是一个字符串，也可以是一个回调函数）</li><li>返回值：一个被替换过的新的字符串，不改变原字符串</li></ul></li><li>接下来的演示中我们只说第一个参数是字符串的情况<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdcba'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr1 = str.replace(<span class="string">'b'</span>, <span class="string">'换'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr1 ); <span class="comment">//=&gt; a换cdcba</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr2 = str.replace(<span class="string">'b'</span>, <span class="string">'换一个'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr2 ); <span class="comment">//=&gt; a换一个cdcba</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr3 = str.replace(<span class="string">'bc'</span>, <span class="string">'换'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( newStr3 ); <span class="comment">//=&gt; a换dcba</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>就是在字符串中找到 <code>replace</code> 第一个参数的位置，拿掉后换上第二个参数的内容就OK了</li><li>在使用这个方法的时候，只能替换一个，也就是找到一个替换掉就好了，不会把所有的都替换掉</li><li>第二个参数还可以是回调函数的形式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="string">'b'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'换'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log( newStr ); <span class="comment">//=&gt; a换c</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>其实和之前没有什么太大的区别，当你第二个参数传递的是一个回调函数的时候，那么会用回调函数的返回值去替换字符串中第一个参数的位置</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>这些就是字符串中比较常用的一些方法</li><li>还有一些方法，不是很常用，就不再介绍了，有兴趣的同学可以自行百度一下</li><li>这些都是操作字符串的基础方法，必须要牢记</li><li>接下来附一个表格，概览一下字符串的方法把</li></ul><table><thead><tr><th>方法</th><th>作用</th><th>参数一</th><th>参数二</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td>charAt</td><td>按照索引查找字符</td><td>index</td><td>/</td><td>找到的字符</td><td></td></tr><tr><td>charCodeAt</td><td>按照索引反向查找字符</td><td>index</td><td>/</td><td>找到的字符</td><td></td></tr><tr><td>indexOf</td><td>按照字符查找索引</td><td>searchIndex</td><td>startIndex</td><td>对应字符的索引</td><td></td></tr><tr><td>lastIndexOf</td><td>按照字符反向查找索引</td><td>searchIndex</td><td>startIndex</td><td>对应字符的索引</td><td></td></tr><tr><td>substr</td><td>抽取字符串</td><td>startIndex</td><td>length</td><td>抽取出来的字符串</td><td></td></tr><tr><td>substring</td><td>抽取字符串</td><td>startIndex</td><td>endIndex</td><td>抽取出来的字符串</td><td></td></tr><tr><td>slice</td><td>截取字符串</td><td>startIndex</td><td>endIndex</td><td>截取出来的字符串</td><td></td></tr><tr><td>split</td><td>分割字符串</td><td>separator</td><td>howmany</td><td>数组（存储着分割后的每一项）</td><td></td></tr><tr><td>toLowerCase</td><td>字符串转小写</td><td>/</td><td>/</td><td>转换后的字符串</td><td></td></tr><tr><td>toUpperCase</td><td>字符串转大写</td><td>/</td><td>/</td><td>转换后的字符串</td><td></td></tr><tr><td>replace</td><td>字符串替换</td><td>regexp\string</td><td>replacement</td><td>替换后的字符串</td><td></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用git在GitHub上托管代码</title>
      <link href="/2016/01/07/%E4%BD%BF%E7%94%A8git%E5%9C%A8GitHub%E4%B8%8A%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81/"/>
      <url>/2016/01/07/%E4%BD%BF%E7%94%A8git%E5%9C%A8GitHub%E4%B8%8A%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="在github上托管自己的代码"><a href="#在github上托管自己的代码" class="headerlink" title="在github上托管自己的代码"></a>在github上托管自己的代码</h1><ul><li>我们可以把我们自己写的代码提交到 github 上面来进行托管，这样就再也不会丢失了，也不会因为版本问题而苦恼了</li><li>在github托管代码的前提是，要有 <code>git版本控制器</code></li><li>这里默认已经安装好 <code>git</code> 了，如果没有，请移步<a href="/2016/01/06/git安装和配置/">git安装和配置</a></li></ul><h2 id="第一次使用git推送代码到github托管"><a href="#第一次使用git推送代码到github托管" class="headerlink" title="第一次使用git推送代码到github托管"></a>第一次使用git推送代码到github托管</h2><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><ul><li>说是本地仓库，其实就是一个本地的文件夹，当这个文件夹被 git 管理起来以后，我们就把这个文件夹叫做一个”本地仓库”</li></ul><ol><li><p>先在电脑中，找到一个自己喜欢的位置，建立一个文件夹，我这里就在桌面新建一个文件夹，叫做”git提交测试”，进入到文件夹里面，鼠标右键单机，选择 <code>git bash</code> 打开git命令行窗口，执行初始化命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git init</span><br></pre></td></tr></table></figure><ul><li>这条命令是初始化的意思，也就是把当前文件夹初始化成一个本地仓库，也就是让这个文件夹被 <code>git版本控制器</code> 管理起来</li><li>这条命令执行完毕以后，会在文件夹中生成一个 <code>.git</code> 的文件夹，因为这个文件夹在某些系统下默认是隐藏文件夹，所以如果看不到，就调整一下”显示隐藏文件夹”就好了</li></ul></li></ol><h3 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h3><ul><li>要在文件夹内写入一些内容，因为一个空的仓库是不能被提交的，写入内容的时候要注意，如果是一个”空文件夹”也是不能被提交的，所以说，在仓库内不要出现空文件夹</li><li>但是，如果我们的需求是却是要在远程仓库保留一个空文件夹占位，以后可能会有东西写入进去的话，我们默认在这个空文件夹内放入一个 <code>.gitkeep</code> 文件，有了 <code>.gitkeep</code> 文件占位，这就不是空文件夹了，就可以提交上去了，以后有东西了，就把这个 <code>.gitkeep</code> 文件删除就好，当然，如果你一定喜欢放一个 <code>a.txt</code> 文件占位也不是不可以<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- git提交测试</span><br><span class="line">  + 测试.txt</span><br><span class="line">  + 空文件夹测试（我是一个空文件夹，在git提交的时候，我是不会被提交上去的）</span><br><span class="line">  - 文件夹提交（我们默认是在问价加内放一个 .gitkeep文件占位）</span><br><span class="line">    + .gitkeep</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><ul><li>添加好内容以后，我们可以看一下当前文件夹内文件的一个状态，看看都有哪些东西会被提交上去</li><li>只要在刚才的 <code>git bash</code> 窗口中输入如下指令就好，会把可以提交的内容展示出来<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git status</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><ul><li>把我们准备好的内容添加到暂存区</li><li>暂存区是干什么用的<ul><li>顾名思义就是暂时存储内容的一个区域，是在本地和远程仓库中间的一个中转站</li><li>也就是说，我们把本地仓库内的东西提交到远程的时候，不是直接提交上去的，而是放在一个”暂存区”内，然后在把”暂存区”的内容提交到远程仓库</li><li>其实，在真正的开发中，我们也是每写完一点东西，都先放在”暂存区”，然后，到晚上的时候，一次性把暂存区里面的所有东西一次性提交到远程仓库</li></ul></li></ul><ol><li><p>把所有内容放入”暂存区”，直接输入如下命令就好：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add *</span><br><span class="line"><span class="meta">$</span> git add --all</span><br><span class="line"><span class="meta">$</span> git add -A</span><br><span class="line"><span class="meta">$</span> git add .</span><br></pre></td></tr></table></figure><ul><li>这四个指令使用哪一个都是可以的</li></ul></li><li><p>也可以只放我们指定的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add 测试.txt</span><br><span class="line"><span class="meta">$</span> git add 文件夹提交/</span><br></pre></td></tr></table></figure><ul><li>上面两个就是指定文件放入”暂存区”</li><li>第一个是放入一个文件</li><li>第二个是放入一个文件夹，要在末尾加上 <code>/</code></li></ul></li></ol><ul><li>这样，文件就会添加到暂存区了</li><li>我在这里使用的是 <code>git add --all</code> 指令，全部添加</li></ul><h3 id="做本次提交说明"><a href="#做本次提交说明" class="headerlink" title="做本次提交说明"></a>做本次提交说明</h3><ul><li>我们每一次放入暂存区内的东西都是为了要提交到远程仓库，所以我们每一次 <code>add</code> 的时候都会做一次当前这次提交的说明，也就是说我们本次的提交都做了什么修改</li><li>比如当前这一次是我们的第一次提交，可以说是 “初始化仓库” 或者 “first” 或者 “提交测试” 之类的说明，瞎写也无所谓，只不过瞎写的话，那我们以后也就不记得哪次提交都做了什么了<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git commit -m "提交测试"</span><br></pre></td></tr></table></figure></li></ul><ul><li>上面这条指令就是本次提交的说明</li></ul><h3 id="添加远程地址"><a href="#添加远程地址" class="headerlink" title="添加远程地址"></a>添加远程地址</h3><ul><li>接下来就是准备提交到远程仓库了</li><li>这个时候，就需要一个远程仓库的地址，因为你要告诉你的 git，代码提交到哪里去</li><li>那么现在我们就需要去到 github 里面创建一个仓库了</li></ul><ol><li>打开<a href="https://github.com/">github</a>，登录自己的github账号，我这里就登录我的GitHub账号了，进去以后，点击 <code>new repository</code>，创建一个远程仓库<br><img src="/img/git/git仓库001.png" alt="git仓库001"></li><li>填写仓库名称，我这里使用 “test” 作为仓库名称（不要使用中文），一般我们选择公开的就好，仓库说明写不写都可以，然后别的都不用管，点击 <code>created repository</code> 创建仓库就好<br><img src="/img/git/git仓库002.png" alt="git仓库001"></li><li>会出现如下界面，这就表示仓库已经创建好了，空仓库就是显示成下面这个样子<br><img src="/img/git/git仓库003.png" alt="git仓库001"><ul><li>其实本次仓库的操作，人家已经给我们列出来了</li><li>这个时候远程仓库有了，我们只要把远程仓库的地址告诉本地仓库那个 <code>git版本控制器</code> 就好了</li><li>这个是在告诉 git 我添加了一个远程仓库地址，你就把东西给提交到这里面去</li><li>并且给这个地址起了一个别名，叫做 <code>origin</code>，这样以后再使用地址的时候，直接使用 <code>origin</code> 就可以了，当然，你想叫个别的名字也是可以的<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git remote add origin 你的仓库地址</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><ul><li>回到我们本地的 <code>git bash</code> 窗口内，输入一个”推送到远程”的指令，就会把暂存区里面的东西推送到远程仓库里面了<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git push -u origin master</span><br></pre></td></tr></table></figure></li></ul><ul><li>这里是把暂存区里面的所有东西都会提交到远程仓库了</li><li>第一次提交的时候，中途会让你填写一次用户名和密码，就是你的github用户名和密码</li><li>有的操作系统默认设置成每次都输入用户名米阿莫，有的系统是输入一次以后就都不用输入了</li><li>本文最后会分享设置密钥，设置了密钥以后就不用输入密码了，每次都会直接提交（如果频繁切换github账户，建议不要设置密钥）</li><li>暂存区里面就没有东西了，这个时候刷新页面，就会看到我们之前本地写的那些东西出现在了远程</li></ul><h2 id="另一种方式的代码提交方法"><a href="#另一种方式的代码提交方法" class="headerlink" title="另一种方式的代码提交方法"></a>另一种方式的代码提交方法</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><ul><li>把刚才的那个提交代码的方式忘掉，我们换一种简单的方式提交一次代码</li><li>先创建一个远程仓库，在<a href="https://github.com/">github</a>上面点击 <code>new repository</code> 创建新的仓库，方法和刚才一样，我这里还叫做 “test” 仓库</li><li>和刚才一样，也把远程仓库的地址复制下来</li></ul><h3 id="本地克隆"><a href="#本地克隆" class="headerlink" title="本地克隆"></a>本地克隆</h3><ul><li>在本地把这个远程仓库克隆下来</li><li>也就是说，把一个空仓库给拉到本地来，这样就会默认变成一个被 <code>git版本控制器</code> 管理的文件加了</li><li>我就直接在桌面上克隆了，在桌面点击鼠标右键，打开 <code>git bash</code> 命令行窗口</li><li>直接输入指令克隆，本地桌面上就会多一个叫做 “test” 的文件夹，这个文件夹就是被 <code>git</code> 管理起来的本地仓库，并且已经可远程 “test” 仓库建立了连接</li><li>我们在里面写入内容以后，直接提交就可以了，不用在输入一次地址了<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone 你的github仓库地址</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加内容-1"><a href="#添加内容-1" class="headerlink" title="添加内容"></a>添加内容</h3><ul><li>和刚才一样，向文件夹内添加一些内容<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- git提交测试</span><br><span class="line">  + 测试.txt</span><br><span class="line">  - 文件夹提交</span><br><span class="line">    + .gitkeep</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加到缓存区"><a href="#添加到缓存区" class="headerlink" title="添加到缓存区"></a>添加到缓存区</h3><ul><li>和之前一样的，添加到暂存区<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add --all</span><br></pre></td></tr></table></figure></li></ul><h3 id="做本次提交说明-1"><a href="#做本次提交说明-1" class="headerlink" title="做本次提交说明"></a>做本次提交说明</h3><ul><li>依旧是做一次提交说明<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git commit -m "提交测试"</span><br></pre></td></tr></table></figure></li></ul><h3 id="推送到远程仓库-1"><a href="#推送到远程仓库-1" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><ul><li>这里就不需要再次填写地址了，直接提交就可以了<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git push -u origin master</span><br></pre></td></tr></table></figure></li></ul><h2 id="第二次以后的推送代码"><a href="#第二次以后的推送代码" class="headerlink" title="第二次以后的推送代码"></a>第二次以后的推送代码</h2><h3 id="添加内容-2"><a href="#添加内容-2" class="headerlink" title="添加内容"></a>添加内容</h3><ul><li>这里说的第二次，就是在已经提交过一次代码的文件夹内，再次进行编辑，然后再次提交</li><li>用上述的两种方法哪一种作为第一次提交都可以</li><li>添加一些新的内容<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- git提交测试</span><br><span class="line">  + 测试.txt</span><br><span class="line">  - 文件夹提交</span><br><span class="line">    + .gitkeep</span><br><span class="line">  - 第二次写入内容.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看状态-1"><a href="#查看状态-1" class="headerlink" title="查看状态"></a>查看状态</h3><ul><li>依旧是查看一下状态，这里其实不是必须每次都查询状态，因为我们自己写的东西，我们自己心里还是很清楚的</li><li>这里只是为了更严谨而已，养成一个严谨的习惯是很好的一件事情<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git status</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加到缓存区-1"><a href="#添加到缓存区-1" class="headerlink" title="添加到缓存区"></a>添加到缓存区</h3><ul><li>添加到暂存区<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add --all</span><br></pre></td></tr></table></figure></li></ul><h3 id="做本次提交说明-2"><a href="#做本次提交说明-2" class="headerlink" title="做本次提交说明"></a>做本次提交说明</h3><ul><li>做本次的提交说明<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git commit -m "第二次提交，添加了 第二次写入内容.txt 文件"</span><br></pre></td></tr></table></figure></li></ul><h3 id="推送到远程仓库-2"><a href="#推送到远程仓库-2" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><ul><li>从第二次推送远程开始就不用写那么多东西了，直接 <code>push</code> 就好了<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git push</span><br></pre></td></tr></table></figure></li></ul><h2 id="密钥的使用"><a href="#密钥的使用" class="headerlink" title="密钥的使用"></a>密钥的使用</h2><ul><li>在这里使用密钥以后，我们就都不用输入密码了</li><li>并且有了密钥以后，我们再创建远程仓库以后，复制地址的时候，不要在使用 <code>HTTPS</code> 了，要使用 <code>SSH</code>，不然密钥就白配置了，不会生效</li></ul><ol><li>首先，打开cmd命令窗口（mac打开终端），查看你的 <code>git config配置</code>，主要是看看你的 <code>user.email</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --list</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>生成密钥，注意生成密钥时候填写的都想别写错了，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C ‘上面配置项中的邮箱’</span><br></pre></td></tr></table></figure><ul><li>输入指令后会出现下面状态，表示本地密钥已经生成<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/你的电脑名称/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/你的电脑名称/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/你的电脑名称/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|    +E .         |</span><br><span class="line">| ..+oo+          |</span><br><span class="line">| oo+*+.o         |</span><br><span class="line">|o.*===+o         |</span><br><span class="line">|==+*... S        |</span><br><span class="line">|B.+.o .o         |</span><br><span class="line">|++o. +  .        |</span><br><span class="line">| +o.+ .          |</span><br><span class="line">|.  o.o           |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure></li></ul></li><li><p>找到密钥文件</p><ul><li>就在上面痴线的那一对东西中，有文件对应的路径 <code>Your identification has been saved in /c/Users/你的电脑名称/.ssh/id_rsa.</code></li><li>按照路径找到这个 <code>id_rsa</code> 文件，打开文件，把里面的内容一个字母都不要放过的复制下来，打开后直接 <code>ctrl + a</code>，然后 <code>ctrl + c</code> 就好</li></ul></li><li>打开<a href="https://github.com/">github</a>，点击设置 <code>settings</code><br><img src="/img/git/git密钥001.png" alt="git密钥001"></li><li>点击 <code>SSH and GPG keys</code><br><img src="/img/git/git密钥002.png" alt="git密钥002"></li><li>点击右上角 <code>New SSH key</code>，把你刚才复制的密钥粘贴在 <code>key</code> 文本域内，<code>title</code> 位置写不写内容都成，或者你随便弄个名字就好，然后点击 <code>add SSH key</code>，就创建好了</li></ol><ul><li>到此，密钥配置完毕，以后再使用仓库地址的时候，记得选择 <code>SSH</code> 在复制地址，就再也不用输入密码了</li></ul>]]></content>
      
      <categories>
          
          <category> Development Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git和github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的基本数据类型-字符串</title>
      <link href="/2016/01/06/JS%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2016/01/06/JS%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="JS中的基本数据类型"><a href="#JS中的基本数据类型" class="headerlink" title="JS中的基本数据类型"></a>JS中的基本数据类型</h1><ul><li>本张旨在介绍JS中的基本数据类型其中的一种 – 字符串类型</li><li>默认已知JS中的所有数据类型</li><li>JS中所有数据类型的分类简介请移步<a href="/2016/01/04/JS中的数据类型">JS中的数据类型</a></li></ul><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><ul><li>字符串，顾名思义就是把若干个字符串起来就是，就叫做字符串<ul><li>字符，就是所有我们键盘上能打出来的每一个都是一个字符</li><li>串，在JS里面依靠单引号 <code>&#39;</code> 和 <code>&quot;</code> 把字符穿起来</li><li>所以，被 <code>&#39;</code> 和 <code>&quot;</code> 包裹的所有内容，我们都叫做 字符串</li><li>但是在js开发过程中，我们推荐使用 <code>&#39;</code> 单引号，因为这个是广大开发者默认的使用方式</li></ul></li></ul><h3 id="字符串的字面量形式"><a href="#字符串的字面量形式" class="headerlink" title="字符串的字面量形式"></a>字符串的字面量形式</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这些都是字符串，所有被 单引号 和 双引号 包裹的我们都叫做字符串</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'dkjsahd1h24i23^%$%$^$%&amp;^'</span>;</span><br><span class="line"><span class="comment">// 下面这个要特别注意，下面这个不是数字 12345，而是字符串 '12345'</span></span><br><span class="line"><span class="comment">// 他们是有区别的，后面我们会提到</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">'12345'</span>;</span><br></pre></td></tr></table></figure><ul><li>在这里一定要注意的就是 <code>字符串的 &#39;12345&#39;</code> 和 <code>数字12345</code> 是不一样的，他们在js中是两种数据类型，不完全一样</li><li>不能把 <code>字符串的 &#39;12345&#39;</code> 当作 <code>数字12345</code> 来使用</li></ul><h3 id="字符串中的符号"><a href="#字符串中的符号" class="headerlink" title="字符串中的符号"></a>字符串中的符号</h3><ul><li>说是”特殊符号”，但是其实不是，只不过在字符串中我们用一些有意义的 <code>字母</code> 加上 <code>符号</code> 来表示一个特殊的意义</li></ul><ol><li><p><code>\</code>，在字符串中表示”转译”的意思</p><ul><li>什么是转译，其实说白了就是把一些有意义的字符转换成没有意义的字符，把没有意义的转换成有意义的</li><li>现在我们知道了一件事情，也就是在字符串中 <code>\</code> 是有意义的，就是”转译”的意思，所以想要在字符串中输出一个 <code>\</code> 的话，就不能直接写了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想在字符串中书写一个 \，这样写是有问题的，会报错</span></span><br><span class="line"><span class="comment">// var str = '\';</span></span><br></pre></td></tr></table></figure><ul><li>我们说了 <code>\</code> 是转译的意思，那么他会把紧挨着他后面的一个字符转译</li><li>紧挨着 <code>\</code> 的是字符 <code>&#39;</code>，而 <code>&#39;</code> 在字符串中代表着字符串边界的意思</li><li>在经过转译之后，那么<code>&#39;</code>，就不再代表字符串边界了，而是一个没有任何意义的 “引号” 而已</li><li>这时我们的字符串就没有后面的边界了，就会报错</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是输出一个 \ 的正确操作</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'\\'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="comment">//=&gt; \</span></span><br></pre></td></tr></table></figure><ul><li>这次，因为紧挨着 <code>\</code> 的是一个 <code>\</code>，而 <code>\</code> 在字符串中表示转译的意思，那么第二个有意义的 <code>\</code>，会被第一个 <code>\</code> 转译，转变正一个没有任何意义的 “斜线”</li><li>这个时候就可以在字符串中正确输出了</li><li>要注意，这个时候 <code>\\</code> 其实表示的就是一个经过转译的 “斜线”，其实还是一个字符位置，转译符号是不占位置的</li></ul></li><li><p><code>\s</code>，在字符串中是表示，把没有意义的 <code>s</code> 经过转译符转译，在字符串中就变得有意义了，表示一个 “空格” 的意思</p><ul><li><code>s</code> 在字符串中本身是没有意义的，紧紧只是一个字符而已，但是把一个没有意义的字符，经过转译符以后，就变得有意义了</li><li>如果在字符串中书写 <code>\s</code> 就表示一个空格的意思</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'1\s2\s3'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="comment">//=&gt; 1 2 3</span></span><br></pre></td></tr></table></figure><ul><li>字符 <code>s</code> 被转译以后，变成了 “一个空格”，只要在字符串中出现 <code>\s</code>，那么就是表示 “一个空格” 的意思</li><li>虽然占位是两个字符的位置，但是在输出的时候，就是一个字符的位置，就是 “一个空格” 的意思</li></ul></li><li><p>想在字符串中输出 “引号”，那么我们就需要用到转译了，因为 <code>&#39;</code> 和 <code>&quot;</code> 在字符串中是边界的意思</p><ul><li>我们就需要一个转译了，我们需要把有意义的 <code>&#39; 和 &quot;</code> 通过转译，转成没有意义的简单字符而已</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'神说：\"要有光\"!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="comment">//=&gt; 神说："要有光"!</span></span><br></pre></td></tr></table></figure><ul><li>我们可以看到，两个引号变成了没有意义的字符出现在字符串里面了</li></ul></li></ol><ul><li>其实这个就是字符串中的一些特殊符号</li><li>当然，还有很多，这里就不意义列举了，有意的可以去 google 自己搜索一下就好了</li><li>下面列举一些，大概知道就好<br><img src="/img/字符串/字符串001.png" alt="字符串001"></li></ul><h3 id="字符串中的一个方法-LENGTH"><a href="#字符串中的一个方法-LENGTH" class="headerlink" title="字符串中的一个方法 LENGTH"></a>字符串中的一个方法 LENGTH</h3><ul><li>length，长度的意思，顾名思义，他就是用来检测当前字符串的长度<ul><li>我们随便写一个字符串，想知道有多少个字符组成，那么我们可以一个一个的数一数</li><li>现在字符串提供给我们一个方法，叫做 <code>length</code>，可以帮我们直接获取到当前字符串的长度</li></ul></li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line"><span class="keyword">var</span> num = str.length;</span><br><span class="line"><span class="built_in">console</span>.log( num );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="comment">//=&gt; 4</span></span><br></pre></td></tr></table></figure><ul><li>这样就会直接把字符串的长度输出了</li><li>但是要注意一个东西，那就是转译符，虽然写的时候占位是两个，但是输出的时候就是一个</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'1\s2\s3'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.length );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="comment">//=&gt; 5</span></span><br></pre></td></tr></table></figure><ul><li>这个时候，输出的就是 5，因为 <code>\s</code> 算做一个字符 “一个空格”</li></ul><h3 id="字符串的使用-字符串拼接"><a href="#字符串的使用-字符串拼接" class="headerlink" title="字符串的使用 - 字符串拼接"></a>字符串的使用 - 字符串拼接</h3><ul><li>字符串拼接，顾名思义就是把两个字符串拼接到一起<ul><li>比如已知一个字符串 <code>abc</code>，第二个字符串 <code>123</code>，现在想得到一个两个拼接到一起的字符串</li><li>得到一个字符串 <code>abc123</code>，这个时候我们就用到字符串拼接了</li><li>在JS中字符串拼接是一个特别简单的事情，那就是使用 <code>+</code> 就可以了</li></ul></li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'123'</span>;</span><br><span class="line"><span class="keyword">var</span> str = str1 + str2;</span><br><span class="line"><span class="built_in">console</span>.log( str );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="comment">//=&gt; abc123</span></span><br></pre></td></tr></table></figure><ul><li>这样就做到了字符串拼接，我们就可以得到一个由两个字符串拼接所组成的字符串</li><li>但是这里有点需要注意的地方，就是我们的 <code>+</code> 这个玩意</li><li>这个在JS中有两个意思<ul><li>数学运算：只有当 <code>+</code> 两边都是数字的时候，才会进行数学运算求和</li><li>字符串拼接：只要 <code>+</code> 有一边是字符串，就会默认把另一边的东西也转换成字符串，然后进行字符串拼接</li></ul></li><li>所以在JS中使用 <code>+</code> 的时候，一定要注意两边的内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'1'</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str1 ); <span class="comment">//=&gt; 11</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'1'</span> + <span class="string">'2'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str2 ); <span class="comment">//=&gt; 12</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log( num ); <span class="comment">//=&gt; 3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串的索引值"><a href="#字符串的索引值" class="headerlink" title="字符串的索引值"></a>字符串的索引值</h3><ul><li>索引（也叫下标），就是字符串中对应位置的编号<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="comment">// 上面是一个字符串，就对应了索引 0 1 2 3 4 5 6</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>注意一个问题，索引从 0 开始，也就是说，字符 <code>a</code> 的索引（下标）就是 0，字符 <code>b</code> 的索引（下标）就是 1，以此类推</li><li>一个字符串中索引的最大值就是 “字符串的长度 - 1”，也就是从 <code>0</code> 到 <code>length -1</code></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>字符串就是用 <code>&#39;</code> 或者 <code>&quot;</code> 包裹的所有内容都叫做字符串<ul><li>在JS中我们推荐使用 <code>&#39;</code></li></ul></li><li>字符串里面有一些”特殊符号”，其实就是经过转译的一些字符而已<ul><li>在JS中 <code>\</code> 就是转译的意思</li><li>不是所有的字符都可以被转译，这里要注意一下</li></ul></li><li>字符串中有一个属性叫做 <code>length</code>，是用来获取字符串的长度的</li><li>字符串拼接我们使用 <code>+</code><ul><li>一定要注意 <code>+</code> 两边的内容</li></ul></li><li>字符串的索引<ul><li>注意从 0 开始，意义对应</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的基本数据类型-数值</title>
      <link href="/2016/01/06/JS%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%80%BC/"/>
      <url>/2016/01/06/JS%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%80%BC/</url>
      <content type="html"><![CDATA[<h1 id="JS中的基本数据类型"><a href="#JS中的基本数据类型" class="headerlink" title="JS中的基本数据类型"></a>JS中的基本数据类型</h1><ul><li>本张旨在介绍JS中的基本数据类型其中的一种 – 数值类型</li><li>默认已知JS中的所有数据类型</li><li>JS中所有数据类型的分类简介请移步<a href="/2016/01/04/JS中的数据类型">JS中的数据类型</a></li></ul><h2 id="Number（数值）"><a href="#Number（数值）" class="headerlink" title="Number（数值）"></a>Number（数值）</h2><ul><li>Number 是一种很简单的数据类型，其实最简单的表现形式就是我们通常的 十进制数字</li><li>我们之前的文章中一直在使用的，也都是数值类型，也是其中最简单的表现形式 “十进制数字”</li><li>在JS中我们也把这种直接给一个固定值的方式叫做数值的字面量形式，因为其他的都是需要进行转换以后显示的</li><li>接下来我们看看数值还有哪些表现形式</li></ul><h3 id="数值的十进制表示"><a href="#数值的十进制表示" class="headerlink" title="数值的十进制表示"></a>数值的十进制表示</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值的字面量可以是一个"十进制"整数形式</span></span><br><span class="line"><span class="comment">// 也可以是一个"浮点数"，也就是我们平时所说的"小数"，但是在JS中我们要叫做 浮点数</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.01</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">100.22</span>;</span><br></pre></td></tr></table></figure><ul><li>这些都是数值的字面量表现形式</li><li>也就是以一个”十进制数字”的形式</li></ul><h3 id="数值的十六进制表示"><a href="#数值的十六进制表示" class="headerlink" title="数值的十六进制表示"></a>数值的十六进制表示</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用一个十六进制的方法来表示一个数值</span></span><br><span class="line"><span class="comment">// 虽然十六进制里面有字母，但是在特殊的写法下，就是表示的一个数值</span></span><br><span class="line"><span class="comment">// 在JS中，一旦以"0x"开头了，那么后面一定代表的要写一个十六进制的数字了</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">0xA</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">0xA1</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">0x23B</span>;</span><br><span class="line"><span class="comment">// 这就是定义了三个数字</span></span><br><span class="line"><span class="comment">// 当你想使用这三个数字的时候，这三个"数字"会自动转换成"十进制"数字给你显示出来</span></span><br><span class="line"><span class="built_in">window</span>.alert( num1 );  <span class="comment">//=&gt; 10</span></span><br><span class="line"><span class="built_in">window</span>.alert( num2 );  <span class="comment">//=&gt; 161</span></span><br><span class="line"><span class="built_in">window</span>.alert( num3 );  <span class="comment">//=&gt; 571</span></span><br></pre></td></tr></table></figure><ul><li>这个就是十六进制的是指，虽然里面有字母出现的，但是依旧是数值的一种，在输出的时候也会转换成”十进制”的数字给你</li><li>十六进制就是用 0～9/A～F 这十六个字符来表示 1～16 这十六个数字，逢十六才进一</li></ul><h3 id="数值的八进制表示"><a href="#数值的八进制表示" class="headerlink" title="数值的八进制表示"></a>数值的八进制表示</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用一个八进制的方式来表示一个数值</span></span><br><span class="line"><span class="comment">// 虽然八进制里面没有字母，但是依靠前导"0"来引导的话，下面的就表示是一个八进制数字</span></span><br><span class="line"><span class="comment">// 在JS中，一旦以"0"开头了，那么后面一定代表的要写一个八进制的数字了</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">010</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">002</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">019</span>;</span><br><span class="line"><span class="comment">// 定义完后在使用的时候，依旧会转化成十进制的数字输出</span></span><br><span class="line"><span class="built_in">window</span>.alert( num1 );  <span class="comment">//=&gt; 10</span></span><br><span class="line"><span class="built_in">window</span>.alert( num2 );  <span class="comment">//=&gt; 2</span></span><br><span class="line"><span class="built_in">window</span>.alert( num3 );  <span class="comment">//=&gt; 19（特殊，因为当前导0后面的数字超过了八进制的取之范围的时候，那么就不是二进制数字了，而是一个十进制数字）</span></span><br></pre></td></tr></table></figure><ul><li>在这里要注意的就是，因为八进制就是 0～7，逢八进一，所以，前导”0”后面的所有数字都必须是 0～7 之间</li><li>一旦前导”0”后面的数字出现 “8 和 9”，那么前导”0”就没有意义了，就变成了一个十进制的数字</li></ul><h3 id="数值的二进制表示"><a href="#数值的二进制表示" class="headerlink" title="数值的二进制表示"></a>数值的二进制表示</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用一个二进制的方式来表示一个数值</span></span><br><span class="line"><span class="comment">// 二进制的前导就是"0B"</span></span><br><span class="line"><span class="comment">// 在JS中，一旦以"0B"开头了，那么后面一定代表的要写一个二进制的数字了</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">0B010</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">0B111</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">0B11001</span>;</span><br><span class="line"><span class="comment">// 定义完在使用的时候，依旧会转化成十进制数字输出</span></span><br><span class="line"><span class="built_in">window</span>.alert( num1 );  <span class="comment">//=&gt; 2</span></span><br><span class="line"><span class="built_in">window</span>.alert( num2 );  <span class="comment">//=&gt; 7</span></span><br><span class="line"><span class="built_in">window</span>.alert( num3 );  <span class="comment">//=&gt; 25</span></span><br></pre></td></tr></table></figure><ul><li>这个就是二进制的表示方法，由”0B”做前导</li></ul><h3 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这种是科学计数法表示一个数字</span></span><br><span class="line"><span class="comment">// 也是数值的一种</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10e2</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10e-2</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">10e222</span>;</span><br><span class="line"><span class="comment">// 当使用的时候，如果数字不是特别大，会帮我们转换成十进制表示的数字形式展示</span></span><br><span class="line"><span class="comment">// 但是如果太大了，就会用科学计数法表示</span></span><br><span class="line"><span class="built_in">window</span>.alert( num1 );  <span class="comment">//=&gt; 1000</span></span><br><span class="line"><span class="built_in">window</span>.alert( num2 );  <span class="comment">//=&gt; 0.1</span></span><br><span class="line"><span class="built_in">window</span>.alert( num3 );  <span class="comment">//=&gt; 1e+223</span></span><br></pre></td></tr></table></figure><ul><li>科学计数法其实说白了只是一种表示十进制数字的方法而已</li><li>其中 <code>e2</code> 就表示 <code>10的2次方</code></li><li><code>10e2</code> 就是 <code>10 乘以 （10的2次方）</code></li></ul><h3 id="取值范围"><a href="#取值范围" class="headerlink" title="取值范围"></a>取值范围</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这两个值在JS中表示无穷大和无穷小</span></span><br><span class="line"><span class="comment">// 但并不是真正的无穷，只是超过了计算机的计算精度以后，都算无穷而已</span></span><br><span class="line"><span class="keyword">var</span> minNum = -<span class="literal">Infinity</span>;</span><br><span class="line"><span class="keyword">var</span> maxNum = <span class="literal">Infinity</span>;</span><br></pre></td></tr></table></figure><ul><li>计算机都有计算精度，不是无穷计算，所以，一旦超过上限就是无穷大，低于下限就是无穷小</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们还有一个在正向取值范围内的最大值和最小值，但是是局限在"正数"</span></span><br><span class="line"><span class="keyword">var</span> minNum = <span class="built_in">Number</span>.MIN_VALUE;</span><br><span class="line"><span class="keyword">var</span> maxNum = <span class="built_in">Number</span>.MAX_VALUE;</span><br><span class="line"><span class="comment">// 这两个是正数范围内的最大值和最小值</span></span><br><span class="line"><span class="built_in">window</span>.alert( minNum );  <span class="comment">//=&gt; 5e-324</span></span><br><span class="line"><span class="built_in">window</span>.alert( maxNum );  <span class="comment">//=&gt; 1.7976931348623157e+308</span></span><br></pre></td></tr></table></figure><ul><li>这个最小值就是一个无限接近于零的值</li><li>这个最大值就是在正向取值范围内的计算机计算上限，比它再大一点就是 <code>Infinity</code></li></ul><h3 id="数值判断"><a href="#数值判断" class="headerlink" title="数值判断"></a>数值判断</h3><ul><li>在JS中的数值类型中，有一个很特殊的数值类型，叫做 <code>NaN</code></li><li>它的意思就是 “不是一个数字（Not a number）”</li><li><code>NaN</code> 本身是一个数值类型，但是是在数值类型中表示”不是一个数字”</li><li>在这里扩展一个方法叫做 <code>isNaN</code>，是检测一个内容是不是一个数字的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert( <span class="built_in">isNaN</span>(<span class="number">1</span>) ); <span class="comment">//=&gt; false</span></span><br><span class="line"><span class="built_in">window</span>.alert( <span class="built_in">isNaN</span>(<span class="string">'a'</span>) ); <span class="comment">//=&gt; true</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这个是什么意思呢？其实 <code>isNaN()</code>，是在问自己这个括号内的内容 “不是一个数字，对吗？”<ul><li>当给我们返回一个 <code>false</code> 的时候，证明这句话说的不对，那么就证明了括号内的东西”是一个数字”</li><li>当给我们返回一个 <code>true</code> 的时候，正名这句话说的对，那么就证明了括号内的东西”不是一个数字”</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git安装和配置</title>
      <link href="/2016/01/06/git%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/01/06/git%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="git和github"><a href="#git和github" class="headerlink" title="git和github"></a>git和github</h1><ul><li>首先我们一定要知道的一点就是，git 和 github 是两个东西，他们之间有联系，但是并不是一个东西</li></ul><h2 id="了解git和github"><a href="#了解git和github" class="headerlink" title="了解git和github"></a>了解git和github</h2><ul><li>在说git之前，我们先要了解一个概念，叫做 “版本控制（Version control）”<ul><li>版本控制系统是任何能让你了解到一个文件的历史，以及它的发展过程的系统</li><li>例如，我们在开发的时候经常遇到的一个问题：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">你的文件夹</span><br><span class="line"> - xxx项目</span><br><span class="line">   + xxx项目最初版</span><br><span class="line">   + xxx项目第一次修改</span><br><span class="line">   + xxx项目第二次修改</span><br><span class="line">   + xxx项目第三次修改</span><br><span class="line">   + xxx项目第四次修改</span><br><span class="line">   + xxx项目第N次修改</span><br><span class="line">   + xxx项目第N次修改后添加xxx功能</span><br><span class="line">   + xxx项目第N次修改后添加xxx功能后第一次修改</span><br><span class="line">   + xxx项目第N次修改后添加xxx功能后第二次修改</span><br><span class="line">   + xxx项目第N次修改后添加xxx功能后第三次修改</span><br><span class="line">   + xxx项目最终版</span><br><span class="line">   + xxx项目最终版第二次</span><br><span class="line">   + xxx项目最终版第三次</span><br><span class="line">   + xxx项目最最终版</span><br><span class="line">   + xxx项目最最终版第二次</span><br><span class="line">   + xxx项目最最最终版</span><br><span class="line">   + 本人以死</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><ul><li>这个时候我们就有了版本的问题，这个只是一个最简单的展示</li><li>这样看起来就不是很好了，尤其是当你有一天还需要以前的版本的时候，你就疯了，因为我们好不容易写的东西，还要在删除了</li><li>这个就是一个文件的发展过程</li><li>git就是来版我们管理这个过程的一个工具，接下来我们就来了解一下 git</li></ul></blockquote><h3 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h3><ul><li>Git 是一种专为处理文本文件而设计的版本控制系统。因为，归根到底，这就是代码的本质：一堆堆以某种方式联合在一起的文本文件。Git 是一个可安装应用，它允许你对你自己所做的更改进行注释，用以创建易于导航的系统历史</li><li>那么， Git 做了什么，是简单地保存文件所做不到的呢？<ul><li>从根本上讲，文件保存就是一个简化的版本控制系统，但坦率地说，它并不是一个好用的系统，因为它只能前进。当然，你也许会争论“撤消”按钮可以让你的文件回滚到以前的状态。但我们都清楚，“撤消”按钮有其局限性，最明显示的是，在关闭文件时，文件的过去也随之丢失</li></ul></li><li>另外，文件保存是非常个人化的。它不能够显示整个系统的历史，只能够显示该文件的。针对这一点，你可能会想，“嗯，我不是一个工程师，我不需要为系统烦恼”。我愿意花些时间来解释一下，很多事情你认为不是“系统”，而实际上它们就是。</li><li>Git 就是一个管理你的文件的系统，可以让你在你的文件作出修改之后，在回到之前的样子，如果对之前的样子不满意，还可以在回来<ul><li>简单来说，就是让我们有一种穿梭时空的感觉，比如你今天想看到昨天的版本，那你就可以把你的文件夹里面的内容会推倒昨天的样子，然后你又想回来，还可以前进到今天的样子，这就是git的功能</li><li>就是用来记录你的每一次修改，让你在每一次修改之前切换自如</li></ul></li></ul><h3 id="什么是github"><a href="#什么是github" class="headerlink" title="什么是github"></a>什么是github</h3><ul><li>我们聊github之前，先来了解几个计算机术语<ul><li>远程（remote）仅仅意味着联网（与“本地”的意思相反）</li><li>仓库（repository，经常简写为“repo”），就是一个具备 Git 权限的文件夹</li><li>远程仓库，就是在网上的一个 git 权限文件夹</li><li>推送（push），就是把本地的文件上传到远程仓库</li><li>终端（terminal），在这里简单的来说就是我们的电脑</li></ul></li></ul><ul><li>github，其实是一个网站，你可以在里面建立一些远程仓库，来存储你的文件（可以想像成百度云盘一样的东西）</li><li>看起来好像没有什么大用，只是把文件保存在了网上而已，但是它的强大就在于控制版本</li><li>因此，Github 就是让你把工作（通过Git提交进行注解）存储在了一个指定的在线文件夹（repo）</li><li>github还有别的重要的功能，他也是一个社区，类似于博客一样的东西，只不过在github这个社区里面的人都是开发人员</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>简单来说，git就是一个版本控制软件，github是一个网站</li><li>可以通过git，把本地的文件推送到github这个网站上保存，做到多终端异地协同开发</li></ul><h2 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h2><ul><li>因为 git 和 github 的不可分割性质，所以我们需要先注册一个 github 的账号</li><li>这里注册账号不影响 git 的安装，只是一些 git 的配置需要有一个 github 的账号</li><li>所以先安装 git，再注册账号，在进行配置也是可以的</li><li>在这里我们先注册账号，然后安装 git，安装完直接进行配置就好了</li></ul><ol><li>打开<a href="https://github.com/">github官网</a>，点击 <code>sing up</code> 按钮进行注册<br><img src="/img/git/github官网.png" alt="github官网注册"></li><li>会跳转到如下界面，填入 用户名/邮箱/密码 后点击 <code>create an account</code> 就可以了<br><img src="/img/git/github注册001.png" alt="github注册"></li><li>选择一个免费的就行，如果你想，选择一个付费的也可以，点击 <code>finish sign up</code> 按钮<br><img src="/img/git/github注册002.png" alt="github注册001"></li><li>会出现如下界面，点击 <code>new repository</code><br><img src="/img/git/github注册003.png" alt="github注册001"></li><li>发现提示你邮箱地址未验证<br><img src="/img/git/github注册004.png" alt="github注册001"></li><li>登录你注册时的邮箱，进行验证<br><img src="/img/git/github注册005.png" alt="github注册001"></li></ol><ul><li>到此，注册账号已经成功，一定要记住自己用户名/邮箱/密码</li><li>接下来我们就要安装和配置git了</li></ul><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><ul><li>可以从<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>下载安装包，挑一个适合自己电脑的就好<br><img src="/img/git/git官网下载安装包.png" alt="git官网下载安装包"></li></ul><ul><li>下载好以后可以得到一个安装软件，不同系统的电脑得到的安装包不一样，但是安装过程基本一样</li><li>这里以 windows 系统下的安装包为例<ul><li>Git-2.11.0.3-64-bit.exe</li></ul></li></ul><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><ol><li>双击下载好的git安装包(上面列出的那个 <code>.exe</code> 文件)，弹出提示框，如下图：<br><img src="/img/git/git安装001.png" alt="git安装001"></li><li>直接点击 <code>next</code> 进入下一步，选择安装路径，如下图：<br><img src="/img/git/git安装002.png" alt="git安装002"></li><li>选择好安装路径后，点击 <code>next</code> 进入下一步，弹出安装配置窗口，包括git命令行、git图形窗口等，如下图所示：<br><img src="/img/git/git安装003.png" alt="git安装003"><ul><li>安装图中打勾的位置打勾</li></ul></li><li>按照上述默认配置，直接点击 <code>next</code> 进入下一步，弹出 <code>选择菜单开始文件</code> 的窗口，如下图所示：<br><img src="/img/git/git安装004.png" alt="git安装004"></li><li>按照默认路径即可，直接点击 <code>next</code>，进入下一步，进入 <code>调整路径环境</code> 窗口，如下图所示：<br><img src="/img/git/git安装005.png" alt="git安装005"><ul><li>这里需要注意了：<ul><li>第一项：直接安装，不会配置git命令的环境变量</li><li>第二项：会自动配置好git命令的环境变量</li><li>第三项：git命令和unix工具命令都会添加到环境变量</li></ul></li></ul></li><li>由于第一项不会配置环境变量，第三项会添加可选unix工具，基本没用，所以选第二项，然后点击 <code>next</code> 进入下一步，如下图所示：<br><img src="/img/git/git安装006.png" alt="git安装006"></li><li>选择第一项，同步下载更新文件时使用windows风格，提交文件时使用unix风格，尽量保证同步兼容。选好后，点击 <code>next</code> 进入下一步，如下图所示：<br><img src="/img/git/git安装007.png" alt="git安装007"></li><li>选择第一项，安装后 <code>git bash</code> 的终端使用起来比较好用。选好后，点击 <code>next</code> 进入下一步。如下图所示：<br><img src="/img/git/git安装008.png" alt="git安装008"></li><li>按照默认配置，直接点击 <code>next</code> 进入下一步。如下图所示：<br><img src="/img/git/git安装009.png" alt="git安装009"></li><li>直接点击 <code>install</code> 进行安装即可，安装完成如下图所示：<br><img src="/img/git/git安装010.png" alt="git安装010"><ul><li>到此为止，git成功安装</li></ul></li><li>在电脑中任意位置点击鼠标右键，会发现多了两个 <code>git</code> 相关选项，点击 <code>git bash</code> 就会打开git命令窗口。如下图所示：<br><img src="/img/git/git安装011.png" alt="git安装011"></li></ol><h3 id="安装成功检测版本号"><a href="#安装成功检测版本号" class="headerlink" title="安装成功检测版本号"></a>安装成功检测版本号</h3><ul><li>当我们打开 <code>git bash</code> 窗口后，已经证明 git 安装成功了，但是还是要看一下git的信息</li><li>打开cmd命令行（mac就打开终端），输入 <code>git</code> 命令后敲击回车，会出现如下信息：<br><img src="/img/git/git安装012.jpg" alt="git安装012"></li></ul><h3 id="做git的配置"><a href="#做git的配置" class="headerlink" title="做git的配置"></a>做git的配置</h3><ul><li>为了我们以后和 <code>github</code> 关联，还有为了使用 <code>github</code> 托管代码作准备，我们还是要进行一些简单的配置</li><li>要配置一下自己电脑上的 <code>git配置信息</code></li></ul><ol><li><p>首先打开cmd命令行（mac打开终端），输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --list</span><br></pre></td></tr></table></figure><ul><li>会显示git在当前电脑上的一些配置信息</li></ul></li><li><p>要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global user.name "guoxiang"</span><br><span class="line"><span class="meta">$</span> git config --global user.email "guoxiang@guoxiang.com"</span><br></pre></td></tr></table></figure><ul><li><code>user.name</code> 一项填入你的电脑名称就可以</li><li><code>user.email</code> 你的邮箱就好</li><li>填好以后再次打开 “配置信息列表”，就可以看到最下面多了两个刚刚配置好的信息</li><li>如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，新的设定保存在当前项目的 <code>.git/config</code> 文件里</li></ul></li><li><p>接下来要设置的是默认使用的文本编辑器。Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 <code>Vi</code> 或者 <code>Vim</code>。如果你有其他偏好，比如 <code>Emacs</code> 的话，可以重新设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global core.editor emacs</span><br></pre></td></tr></table></figure><ul><li>这个不是必要的配置，如果你是初学者，还不太会使用git的话，不要进行这个配置</li></ul></li><li><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 <code>vimdiff</code> 的话：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global merge.tool vimdiff</span><br></pre></td></tr></table></figure><ul><li>Git 可以理解 <code>kdiff3</code>，<code>tkdiff</code>，<code>meld</code>，<code>xxdiff</code>，<code>emerge</code>，<code>vimdiff</code>，<code>gvimdiff</code>，<code>ecmerge</code>，和 <code>opendiff</code> 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具</li><li>这个不是必要的配置，如果你是初学者，还不太会使用git的话，不要进行这个配置</li></ul></li></ol><ul><li>到此，git的安装和配置就全部完成了，接下来就可以使用 <code>git</code> 在 <code>github</code> 上面托管自己的代码了</li><li>其实，在 github 上面托管代码，如果我们不是经常切换 github 账号的话，我们可以配置一个 <code>密钥</code>，会比较省事，但是这里不说这个配置，会在<a href="https://wdbbdpd223322.github.io/2018/04/10/%E4%BD%BF%E7%94%A8git%E5%9C%A8GitHub%E4%B8%8A%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81/" target="_blank" rel="noopener">使用git在GitHub上托管代码</a>文章中分享</li></ul>]]></content>
      
      <categories>
          
          <category> Development Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git和github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的基本数据类型-布尔</title>
      <link href="/2016/01/06/JS%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%B8%83%E5%B0%94/"/>
      <url>/2016/01/06/JS%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%B8%83%E5%B0%94/</url>
      <content type="html"><![CDATA[<h1 id="JS中的基本数据类型"><a href="#JS中的基本数据类型" class="headerlink" title="JS中的基本数据类型"></a>JS中的基本数据类型</h1><ul><li>本张旨在介绍JS中的基本数据类型其中的一种 – 布尔类型</li><li>默认已知JS中的所有数据类型</li><li>JS中所有数据类型的分类简介请移步<a href="/2016/01/04/JS中的数据类型">JS中的数据类型</a></li></ul><h2 id="Boolean（布尔）"><a href="#Boolean（布尔）" class="headerlink" title="Boolean（布尔）"></a>Boolean（布尔）</h2><ul><li>布尔相对于数值、字符串来说相对简单很多了</li><li>没有大量的实例属性和方法，只有两个值，就是 <code>true</code> 和 <code>false</code></li><li>从某种意义上说，为计算机设计程序就是与布尔值打交道，作为最基本的事实，所有的电子电路只能识别和使用布尔数据</li></ul><h3 id="布尔的两个值"><a href="#布尔的两个值" class="headerlink" title="布尔的两个值"></a>布尔的两个值</h3><ul><li>第一个是：<code>true</code>，表示 “真” 这个状态，在计算机里面存储形式就是 “1”</li><li>第二个是：<code>false</code>，表示 “假” 这个状态，在计算机里面的存储形式就是 “0”</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>在JS中，布尔使用最多的场景应该就是用于条件判断</li></ul><ol><li><p>if语句中的条件判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果为真，执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果为假，执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环中的条件判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 条件为真就执行这里面的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="得到一个布尔值"><a href="#得到一个布尔值" class="headerlink" title="得到一个布尔值"></a>得到一个布尔值</h3><ul><li>一般来说，我们在使用的时候，很少直接使用 <code>true</code> 或者 <code>false</code>，都是通过一个表达式得到一个布尔值来使用</li><li>比如在 if 语句中，我们也不会直接使用 <code>true</code>，而是依靠一个表达式来得到<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般不会这么使用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="comment">// code runs here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用表达式得到布尔值进行判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line"> <span class="comment">// code runs here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>上面的两种使用方式，我们一般来说都是使用第二种</li><li>在做分支语句的时候，利用一个表达式来得到布尔值</li></ul><h3 id="布尔值的转换"><a href="#布尔值的转换" class="headerlink" title="布尔值的转换"></a>布尔值的转换</h3><ul><li>所有的数据都可以转换成布尔值</li><li>也就是说，每一个值都可以转换成布尔值，也就是转换成一个要么 <code>true</code> 要么 <code>false</code> 的状态</li><li>其实在 JS 中，只有7个值是 <code>false</code>，其他的都是 <code>true</code></li><li>我们转换布尔的时候使用的是 <code>Boolean()</code> 方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(<span class="literal">false</span>) ); <span class="comment">//=&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(+<span class="number">0</span>) ); <span class="comment">//=&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(<span class="number">-0</span>) ); <span class="comment">//=&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(<span class="literal">NaN</span>) ); <span class="comment">//=&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(<span class="literal">null</span>) ); <span class="comment">//=&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(<span class="literal">undefined</span>) ); <span class="comment">//=&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(<span class="string">''</span>) ); <span class="comment">//=&gt; false</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这就是 7 个得到 <code>false</code> 的值，也有说是 5 个的<ul><li>“+0” 和 “-0” 算一个，都是 “0”</li><li>“false 不算，因为本身就是 false，转换完肯定也是 false</li></ul></li><li>这个不重要，知道是什么就好了</li><li>要注意的就是，上面的第七个<ul><li>那个是”空字符串”，不是空格，不是什么都没有，就是空字符串</li><li>就好像一个玻璃杯，不是没有颜色，只不过是透明的一种颜色一个道理</li><li>一个 “空格字符串” 是 <code>true</code>，只有 “空字符串” 才是 <code>false</code></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的基本数据类型-空</title>
      <link href="/2016/01/06/JS%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E7%A9%BA/"/>
      <url>/2016/01/06/JS%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E7%A9%BA/</url>
      <content type="html"><![CDATA[<h1 id="JS中的基本数据类型"><a href="#JS中的基本数据类型" class="headerlink" title="JS中的基本数据类型"></a>JS中的基本数据类型</h1><ul><li>本张旨在介绍JS中的基本数据类型其中的一种 – 空类型</li><li>默认已知JS中的所有数据类型</li><li>JS中所有数据类型的分类简介请移步<a href="/2016/01/04/JS中的数据类型">JS中的数据类型</a></li></ul><h2 id="Null和Undefined（空）"><a href="#Null和Undefined（空）" class="headerlink" title="Null和Undefined（空）"></a>Null和Undefined（空）</h2><ul><li>在JS中有两种数据类型，<code>Null</code> 和 <code>Undefined</code> 都是空的意思</li><li>虽然两个都是空，但是这是两个完全不同的数据类型，也有着完全不同的两个意思</li><li>为什么要放在一起说呢，因为这两个完全不同的数据类型，之间又有着一些联系</li></ul><h3 id="不得不说的一些历史遗留问题"><a href="#不得不说的一些历史遗留问题" class="headerlink" title="不得不说的一些历史遗留问题"></a>不得不说的一些历史遗留问题</h3><ul><li>在学习 <code>Null</code> 和 <code>Undefined</code> 之前，我们一定要说一下他们两个的历史</li><li>他们两个的值<ol><li><code>Null</code> 数据类型只有一个值，就是：<code>null</code></li><li><code>Undefined</code> 数据类型只有一个值，就是：<code>undefined</code></li></ol></li><li>大多数计算机语言，有且仅有一个表示 “无” 的值，比如，C语言的 <code>NULL</code>，Java语言的 <code>null</code>，Python语言的 <code>None</code>，Ruby语言的 <code>nil</code></li><li>有点奇怪的是，JavaScript语言居然有两个表示 “无” 的值：<code>undefined</code> 和 <code>null</code></li><li>这与JavaScript的历史有关。1995年JavaScript诞生时，最初像Java一样，只设置了 <code>null</code> 作为表示 “无” 的值</li><li>根据C语言的传统，null被设计成可以自动转为0</li><li>但是，JavaScript的设计者Brendan Eich，觉得这样做还不够，有两个原因<ol><li>null像在Java里一样，被当成一个对象。但是，JavaScript的数据类型分成原始类型（primitive）和合成类型（complex）两大类，Brendan Eich 觉得表示 “无” 的值最好不是对象</li><li>JavaScript的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。Brendan Eich 觉得，如果 <code>null</code> 自动转为0，很不容易发现错误</li></ol></li><li>因此，Brendan Eich又设计了一个undefined<ul><li>JavaScript的最初版本是这样区分的：<code>null</code> 是一个表示 “无” 的对象，转为数值时为0；<code>undefined</code> 是一个表示 “无” 的原始值，转为数值时为NaN<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Number</span>(<span class="literal">undefined</span>) ); <span class="comment">//=&gt; NaN</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Number</span>(<span class="literal">null</span>) ); <span class="comment">//=&gt; 0</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>这些只是一些历史问题，我们不需要去记住他，看看了解一下就好，接下来我们讲一讲现在的 <code>Null</code> 和 <code>Undefined</code></li></ul><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><ul><li>Null 只有一个值，就是 <code>null</code></li><li>从逻辑角度来看，<code>null</code> 值表示一个空对象指针，而这也正是使用 <code>typeof</code> 操作符检测 <code>null</code> 值会返回 <code>object</code> 的原因<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//=&gt; object</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>上面使用的一个 <code>typeof</code> 关键字，这个关键字就是用来检测数据类型的，详细解释请移步<a href="">检测数据类型的方法-typeof</a></li><li>在使用的时候，一般来说我们不会得到一个 <code>null</code>，只能由我们自己赋值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>所以一般来说，如果定义的变量准备在将来用来保存对象，那么最好将该变量初始化为null而不是其他值。这样一来，只要直接检查null值就可以知道相应的变量是否已经保存了一个对象的引用</li><li>这也只是一个开发者默认的使用方式</li></ul><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><ul><li>Undefined 数据类型也是只有一个值，就是 <code>undefined</code></li><li></li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>封装简单版全兼容ajax</title>
      <link href="/2016/01/06/%E5%B0%81%E8%A3%85%E7%AE%80%E5%8D%95%E7%89%88%E5%85%A8%E5%85%BC%E5%AE%B9ajax/"/>
      <url>/2016/01/06/%E5%B0%81%E8%A3%85%E7%AE%80%E5%8D%95%E7%89%88%E5%85%A8%E5%85%BC%E5%AE%B9ajax/</url>
      <content type="html"><![CDATA[<h1 id="今天我们来封装一个简单版本的ajax请求"><a href="#今天我们来封装一个简单版本的ajax请求" class="headerlink" title="今天我们来封装一个简单版本的ajax请求"></a>今天我们来封装一个简单版本的ajax请求</h1><ul><li>在我们使用ajax请求的时候，因为使用频繁，所以一定是要封装的</li><li>虽然现在市场上有很多 ajax 的插件，但是我们还是手动封装一个，只是为了帮助我们更好的理解 ajax 而已</li><li>接下来就是一个简单的全兼容版本 ajax </li></ul><h2 id="最基础的-ajax-请求"><a href="#最基础的-ajax-请求" class="headerlink" title="最基础的 ajax 请求"></a>最基础的 ajax 请求</h2><ul><li>在封装之前，先来回顾一下最基础的 ajax 请求<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'data.json'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.test(xhr.status)) &#123;</span><br><span class="line">    data = xhr.responseText</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li>这是我们最开始接触到的 ajax，接下来我们就根据这个来进行封装</li></ul><h2 id="封装-ajax-的过程"><a href="#封装-ajax-的过程" class="headerlink" title="封装 ajax 的过程"></a>封装 ajax 的过程</h2><h3 id="分析代码和思路"><a href="#分析代码和思路" class="headerlink" title="分析代码和思路"></a>分析代码和思路</h3><ul><li>在封装之前，我们先来进行封装钱的分析，看看我们需要做哪些工作</li></ul><ol><li><p>既然是全兼容版本，那么第一个就是要在创建的时候，判断浏览器，看看到底使用什么方法进行创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准浏览器</span></span><br><span class="line"><span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 一下三种都是IE浏览器，对应不同版本</span></span><br><span class="line"><span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line"><span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml12.XMLHTTP'</span>);</span><br><span class="line"><span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml13.XMLHTTP'</span>);</span><br><span class="line"><span class="comment">// 既然是自己封装，那我们就把所有的都考虑进去</span></span><br></pre></td></tr></table></figure></li><li><p>封装的时候，就要考虑到使用的时候怎么方便怎么来，所以调用的时候最好是只传一个对象，在对象里面传递一些配置项，如 <code>url</code> / <code>data</code> / <code>success</code> 等参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用的时候就以这种形式进行调用和传参</span></span><br><span class="line">myAjax(&#123;</span><br><span class="line">  url: <span class="string">''</span>,</span><br><span class="line">  data: <span class="string">''</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>需要考虑请求类型，比如是 <code>get</code> / <code>post</code> / <code>delete</code> 等等</p></li><li>请求的是哪个路径标识下的东西，也就是 <code>url</code></li><li>因为默认是异步请求，但是有时候我们还需要同步，所以也要考虑是否异步</li><li>接收响应的时候，判断是否需要响应头回来的时候就做一些处理，所以对 <code>readystste === 2</code> 和 <code>readystste === 4</code> 分别进行判断处理</li><li>接收响应的时候，成功的回调和失败的回调</li><li>在发送请求的时候有没有请求体，也就是说在 <code>post</code> 的时候需要请求体，<code>get</code> 的时候不需要</li></ol><ul><li>通过基本分析，我们需要在封装中处理这写事情</li><li>这个只是一个大概的思路分析，在真正封装的时候，还有一些细节要处理，遇到的时候在细说</li></ul><h3 id="处理兼容问题Demo"><a href="#处理兼容问题Demo" class="headerlink" title="处理兼容问题Demo"></a>处理兼容问题Demo</h3><ul><li>我们处理兼容问题有很多种方式，可以使用 <code>if else</code> 进行判断，但是会有一些缺陷存在<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单版本兼容处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getXHR</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">   xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)) &#123;</span><br><span class="line">   xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ActiveXObject(<span class="string">'Msxml12.XMLHTTP'</span>)) &#123;</span><br><span class="line">   xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml12.XMLHTTP'</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ActiveXObject(<span class="string">'Msxml13.XMLHTTP'</span>)) &#123;</span><br><span class="line">   xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml13.XMLHTTP'</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   xhr = <span class="string">'your browser is not support ajax, please change your browser, try again!'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> xhr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>这个是最简单的处理兼容问题的方式，分别进行判断，只要有这个方法就调用，没有就换下一种进行判断</li><li>最后如果都没有就返回一个字符串，需要升级浏览器了</li><li>可是这里有一个致命的缺陷，就出现在判断那里。我们的这个方法会返回一个已经创建好的 ajax 对象，那么也就是说，每一次请求都要调用一次 <code>getXHR</code> 这个方法</li><li>那么，一旦我们要是有十次请求，那么就要调用十次，对浏览器进行十次判断，虽然没有错，但是这样并不好，如果是一百次呢，那么浏览器的判断就更多了</li><li>如果说，我们能在第一次调用 <code>getXHR</code> 的时候就判断完成，并且把判断的结果给固定下来，那么后面的每次调用都不用在进行判断了，而是直接调用就可以了</li><li>接下来我们要用一种JS中的高级思想来解决这个问题，如果理解不了，就使用上面的方法进行封装就好</li></ul><h4 id="惰性思想解决兼容问题"><a href="#惰性思想解决兼容问题" class="headerlink" title="惰性思想解决兼容问题"></a>惰性思想解决兼容问题</h4><ul><li>这里我们用到JS中的高级编程思想”惰性思想”来解决问题</li><li>那么这个就得分开来说了</li><li>首先我们定义四个函数，每个函数返回一种创建 ajax 对象的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数执行以后，就会得到一个 ajax 对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> XActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml3.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>然后我们把他们放在一个数组里面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [createXHR1, createXHR2, createXHR3, createXHR4]</span><br></pre></td></tr></table></figure></li></ul><ul><li>这个时候，我们可以循环遍历数组，使用 <code>try{}catch{}</code> 的方法分别执行每一个，那么一定会有一个能够执行成功<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历这个数组</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// 分别执行每一个函数，把返回值赋值给 xhr 变量</span></span><br><span class="line">   <span class="comment">// 如果没有这个方法，那么一定会报错，就会走到 catch 中，导致循环继续</span></span><br><span class="line">   <span class="comment">// 如果有了这个方法，那么就会返回一个 ajax 对象，那么我们直接打断循环就好了，这样我们就得到了一个 ajax 对象</span></span><br><span class="line">   xhr = arr[i]();</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>这样我们就完成了，但是好像还是不很好呢，因为还是每次调用的都会循环，接下来我们就把他们和在一起，处理一下每次都要循环的问题<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个 xhr 接收 ajax 对象</span></span><br><span class="line">  <span class="comment">// 定义一个 flag 开关，看看是否找到合适的创建 ajax 对象的方法</span></span><br><span class="line">  <span class="comment">// 定义一个数组，存储四种创建 ajax 对象的方式</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="literal">null</span>,</span><br><span class="line">    flag = <span class="literal">false</span>,</span><br><span class="line">    ary = [</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml3.XMLHTTP"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">  <span class="comment">// 依旧是循环遍历数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> curFn = ary[i];</span><br><span class="line">    <span class="comment">// 依次执行，找到合适的创建 ajax 对象的方法</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      xhr = curFn();</span><br><span class="line">      <span class="comment">// 这里是核心，一旦找到合适的方法，那么我们就把这个函数重新赋值给 createXHR</span></span><br><span class="line">      createXHR = curFn;</span><br><span class="line">      <span class="comment">// 让开关为 true</span></span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果到最后开关依旧为 false，证明四种方法都不合适，那么我们就需要提醒浏览器升级</span></span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"your browser is not support ajax, please change your browser,try again!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最后返回 ajax 对象</span></span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>看似没有什么改变，但是之一第 28 行的代码，有一个重写 <code>createXHR</code></li><li>这个是整个”惰性思想”的核心，也就是说，我只有在当前浏览器中，第一次执行 <code>createXHR</code> 的时候是这个函数</li><li>一旦找到一个合适的创建 ajax 对象的方法以后，那么从第二次执行 <code>createXHR</code> 开始，就全部都是我们之前数组中的某一个函数了</li><li>再也不用循环判断，而是直接用一种有效的方法创建一个 ajax 对象了</li><li>这个是一种 js 中的高级编程思想，如果理解不了，就用我们最开始写的判断的形式来进行就可以，慢慢体会一段时间就能明白了</li></ul><h3 id="开始封装"><a href="#开始封装" class="headerlink" title="开始封装"></a>开始封装</h3><ul><li>解决了兼容性这个大问题，接下来就没有什么复杂的逻辑了，只要全部当作参数提取出来就可以了</li></ul><ol><li>先要确定我们传参的形式，我们这里仿照 jQuery 中的方式进行传参<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己封装的 ajax 函数调用</span></span><br><span class="line"><span class="comment">// 对象形式传参</span></span><br><span class="line">myAjax(&#123;</span><br><span class="line">  url: <span class="string">'data.json'</span>, <span class="comment">// 请求地址，每次必填</span></span><br><span class="line">  type: <span class="string">'get'</span>, <span class="comment">// 请求方式，默认 get</span></span><br><span class="line">  dataType: <span class="string">'json'</span>, <span class="comment">// 要求响应数据格式，默认 json</span></span><br><span class="line">  <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">// 是否异步，默认是 true 为异步请求</span></span><br><span class="line">  data: <span class="literal">null</span>, <span class="comment">// 请求体内容</span></span><br><span class="line">  getHead: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="comment">// 当响应头返回的时候执行的回调</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 成功返回后的回调</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>基本上我们简单的写一写就可以了，我们这个是简单版本的 ajax 封装</li><li>以后我们会写一个复杂版本的 ajax 封装</li></ul><ol start="2"><li>开始写 <code>myAjax</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有封装先来一个自执行匿名函数，保护私有变量不被污染</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 第一件是先是创建一个 ajax 对象，可以把我们刚才封装的全兼容的直接写在这里</span></span><br><span class="line">  <span class="comment">// 也可以当作一个单独文件引入，这里为了方便就直接写在这里了</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>,</span><br><span class="line">      flag = <span class="literal">false</span>,</span><br><span class="line">      ary = [</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml3.XMLHTTP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> curFn = ary[i];</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        xhr = curFn();</span><br><span class="line">        createXHR = curFn;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"your browser is not support ajax, please change your browser,try again!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 第二件事，是处理一下传递进来的参数</span></span><br><span class="line">  <span class="comment">// 因为有些配置项可以不写，有默认值，所以我们要自己制作一套默认值使用</span></span><br><span class="line">  <span class="keyword">var</span> _default = &#123;</span><br><span class="line">    url: <span class="string">""</span>,</span><br><span class="line">    type: <span class="string">"get"</span>,  <span class="comment">// 这个是默认值</span></span><br><span class="line">    dataType: <span class="string">"json"</span>,  <span class="comment">// 这个是默认值</span></span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>,  <span class="comment">// 这个是默认值</span></span><br><span class="line">    data: <span class="literal">null</span>,  <span class="comment">// 因为默认为 get 请求，所以默认没有请求体</span></span><br><span class="line">    getHead: <span class="literal">null</span>,  <span class="comment">// 回调函数没有默认值</span></span><br><span class="line">    success: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 接下来把传递进来的参数和我们设置的默认值合并</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.hasOwnProperty(key)) &#123;</span><br><span class="line">      _default[key] = options[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>这样，我们基础就完成了</li><li>我们设置的默认值也被调用的时候的配置项覆盖了，如果调用的时候没用传递的那么可以直接使用配置项</li></ul><ol start="3"><li>给 url 拼接一个时间戳<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有封装先来一个自执行匿名函数，保护私有变量不被污染</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 第一件是先是创建一个 ajax 对象，可以把我们刚才封装的全兼容的直接写在这里</span></span><br><span class="line">  <span class="comment">// 也可以当作一个单独文件引入，这里为了方便就直接写在这里了</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>,</span><br><span class="line">      flag = <span class="literal">false</span>,</span><br><span class="line">      ary = [</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml3.XMLHTTP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> curFn = ary[i];</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        xhr = curFn();</span><br><span class="line">        createXHR = curFn;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"your browser is not support ajax, please change your browser,try again!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 第二件事，是处理一下传递进来的参数</span></span><br><span class="line">  <span class="comment">// 因为有些配置项可以不写，有默认值，所以我们要自己制作一套默认值使用</span></span><br><span class="line">  <span class="keyword">var</span> _default = &#123;</span><br><span class="line">    url: <span class="string">""</span>,</span><br><span class="line">    type: <span class="string">"get"</span>,  <span class="comment">// 这个是默认值</span></span><br><span class="line">    dataType: <span class="string">"json"</span>,  <span class="comment">// 这个是默认值</span></span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>,  <span class="comment">// 这个是默认值</span></span><br><span class="line">    data: <span class="literal">null</span>,  <span class="comment">// 因为默认为 get 请求，所以默认没有请求体</span></span><br><span class="line">    getHead: <span class="literal">null</span>,  <span class="comment">// 回调函数没有默认值</span></span><br><span class="line">    success: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 接下来把传递进来的参数和我们设置的默认值合并</span></span><br><span class="line">  <span class="comment">// options 就是调用是传递的参数，在这里先看一下，因为我们后面要把这个放在 myAjax 函数中</span></span><br><span class="line">  <span class="comment">// 之所以先说这个，是为了先搞明白这个是什么，要不后面就太长了</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.hasOwnProperty(key)) &#123;</span><br><span class="line">      _default[key] = options[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 第三件事，给 url 添加时间戳，是为了避免两次同样的 get 请求不能跟新数据</span></span><br><span class="line">  <span class="keyword">if</span> (_default.type === <span class="string">"get"</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果 url 后面已经有了 '?'，那么我们就拼接一个 '&amp;' 符号，如果没有，就拼接一个 '?'</span></span><br><span class="line">    _default.url.indexOf(<span class="string">"?"</span>) &gt;= <span class="number">0</span> ? _default.url += <span class="string">"&amp;"</span> : _default.url += <span class="string">"?"</span>;</span><br><span class="line">    <span class="comment">// 在后面拼接一个查询字符串，就给一个随机数就好</span></span><br><span class="line">    _default.url += <span class="string">"_="</span> + <span class="built_in">Math</span>.random();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是为了避免更新数据以后，重新请求的话，如果 url 没有变，那么默认会读取缓存中的内容，达不到更新数据的目的</span></span><br><span class="line">  <span class="comment">// 拼接了时间戳以后，那么两次 get 请求虽然一样，但是因为查询字符串不一样，会默认两次 get 请求不一样，不会读取缓存内容</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>这里一定要注意时间戳的问题，因为我们有的请求是为了更新数据</li><li>如果没有时间戳，那么会读取缓存中的数据，达不到数据跟新的目的</li></ul><ol start="4"><li>把 ajax 请求的方法添加进来就好了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有封装先来一个自执行匿名函数，保护私有变量不被污染</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 第一件是先是创建一个 ajax 对象，可以把我们刚才封装的全兼容的直接写在这里</span></span><br><span class="line">  <span class="comment">// 也可以当作一个单独文件引入，这里为了方便就直接写在这里了</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>,</span><br><span class="line">      flag = <span class="literal">false</span>,</span><br><span class="line">      ary = [</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml3.XMLHTTP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> curFn = ary[i];</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        xhr = curFn();</span><br><span class="line">        createXHR = curFn;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"your browser is not support ajax, please change your browser,try again!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 第四件事，发送 ajax 请求，就是我们最一开始写的哪个方法拿过来就好了</span></span><br><span class="line">  <span class="comment">// 我们在这里把第二件事和第三件事，拿到了 ajax 方法里面</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个一定要放在函数里面来说使用，因为我们挂载到全局的是这个函数</span></span><br><span class="line">    <span class="keyword">var</span> _default = &#123;</span><br><span class="line">      url: <span class="string">""</span>,</span><br><span class="line">      type: <span class="string">"get"</span>,</span><br><span class="line">      dataType: <span class="string">"json"</span>,</span><br><span class="line">      <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">      data: <span class="literal">null</span>,</span><br><span class="line">      getHead: <span class="literal">null</span>,</span><br><span class="line">      success: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">      <span class="keyword">if</span> (options.hasOwnProperty(key)) &#123;</span><br><span class="line">          _default[key] = options[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_default.type === <span class="string">"get"</span>) &#123;</span><br><span class="line">      _default.url.indexOf(<span class="string">"?"</span>) &gt;= <span class="number">0</span> ? _default.url += <span class="string">"&amp;"</span> : _default.url += <span class="string">"?"</span>;</span><br><span class="line">      _default.url += <span class="string">"_="</span> + <span class="built_in">Math</span>.random();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把方法写一边就 OK 了，只不过要注意，多有的地方都换成我们对象中的属性就好了</span></span><br><span class="line">    <span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">    xhr.open(_default.type, _default.url, _default.async);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/^2\d&#123;2&#125;$/</span>.test(xhr.status)) &#123;</span><br><span class="line">        <span class="comment">// 状态码为 2 的时候，表示响应头回来了</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> _default.getHead === <span class="string">"function"</span>) &#123;</span><br><span class="line">            _default.getHead.call(xhr);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 状态码为 4 的时候，表示响应体回来了</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> val = xhr.responseText;</span><br><span class="line">          <span class="keyword">if</span> (_default.dataType === <span class="string">"json"</span>) &#123;</span><br><span class="line">            val = <span class="string">"JSON"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="built_in">JSON</span>.parse(val) : <span class="built_in">eval</span>(<span class="string">"("</span> + val + <span class="string">")"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          _default.success &amp;&amp; _default.success.call(xhr, val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(_default.data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 挂载到全局</span></span><br><span class="line">  <span class="built_in">window</span>.myAjax = myAjax;</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>在这里一定要注意，我们之前写的”第二件事”和”第三件事”是要放在函数体里面的</li><li>之所以放在前面说，是因为如果都放在后面，那么代码就会比较长了</li><li>所以先说一下问题，最后在封装到一起</li></ul><h3 id="给一个完整的代码"><a href="#给一个完整的代码" class="headerlink" title="给一个完整的代码"></a>给一个完整的代码</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>,</span><br><span class="line">      flag = <span class="literal">false</span>,</span><br><span class="line">      ary = [</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml3.XMLHTTP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> curFn = ary[i];</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        xhr = curFn();</span><br><span class="line">        createXHR = curFn;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"your browser is not support ajax, please change your browser,try again!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _default = &#123;</span><br><span class="line">      url: <span class="string">""</span>,</span><br><span class="line">      type: <span class="string">"get"</span>,</span><br><span class="line">      dataType: <span class="string">"json"</span>,</span><br><span class="line">      <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">      data: <span class="literal">null</span>,</span><br><span class="line">      getHead: <span class="literal">null</span>,</span><br><span class="line">      success: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">      <span class="keyword">if</span> (options.hasOwnProperty(key)) &#123;</span><br><span class="line">          _default[key] = options[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_default.type === <span class="string">"get"</span>) &#123;</span><br><span class="line">      _default.url.indexOf(<span class="string">"?"</span>) &gt;= <span class="number">0</span> ? _default.url += <span class="string">"&amp;"</span> : _default.url += <span class="string">"?"</span>;</span><br><span class="line">      _default.url += <span class="string">"_="</span> + <span class="built_in">Math</span>.random();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">    xhr.open(_default.type, _default.url, _default.async);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/^2\d&#123;2&#125;$/</span>.test(xhr.status)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> _default.getHead === <span class="string">"function"</span>) &#123;</span><br><span class="line">            _default.getHead.call(xhr);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> val = xhr.responseText;</span><br><span class="line">          <span class="keyword">if</span> (_default.dataType === <span class="string">"json"</span>) &#123;</span><br><span class="line">            val = <span class="string">"JSON"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="built_in">JSON</span>.parse(val) : <span class="built_in">eval</span>(<span class="string">"("</span> + val + <span class="string">")"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          _default.success &amp;&amp; _default.success.call(xhr, val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(_default.data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.myAjax = myAjax;</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>本篇文章说是在讲解一个 全兼容版本的ajax封装，但是实际上都比较简单</li><li>真是意义是在讲解一个”惰性思想”</li><li>只是设置了这样一个场景而已</li><li>希望有帮助，尽量去理解一些面向对象的高级思想</li></ul>]]></content>
      
      <categories>
          
          <category> Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>变量的命名规则和规范</title>
      <link href="/2016/01/05/%E5%8F%98%E9%87%8F%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E5%92%8C%E8%A7%84%E8%8C%83/"/>
      <url>/2016/01/05/%E5%8F%98%E9%87%8F%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E5%92%8C%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="变量名的命名规则和命名规范"><a href="#变量名的命名规则和命名规范" class="headerlink" title="变量名的命名规则和命名规范"></a>变量名的命名规则和命名规范</h1><ul><li>既然在代码中我们使用到了变量，那么他一定要有一些规则，不能随便瞎写</li><li>有了规则以后，世界上那么多的开发者，规则不可能对所有的东西都进行整顿，那么在我们开发者中，就会有一套大家默认的书写规范诞生</li><li>规则必须遵守，不遵守规则就是错了，而规范只是所有开发者约定俗成的东西，不遵守不会错，但是可能会导致你的代码别人看不懂，如果大家都没有规范，只是按照自己的意愿在写代码，那可能维护起来就成问题了</li><li>变量名的规范只是很小的一个部分，在接下来的学习中，还会有更多的规范，所有的东西都是要从一开始就养成良好的习惯</li><li>接下来我们就来说一说命名规则和命名规范</li></ul><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li>先来说一说命名规则</li><li>因为这个是 ECMAScript 制定的规范，不这么写就会出错，程序就不能正常运行</li></ul><ol><li><p>所有的变量名，只能由 数字/字母/下划线（_）/美元符（$）组成，并且不能由数字开头</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> _a;</span><br><span class="line"><span class="keyword">var</span> a_b;</span><br><span class="line"><span class="keyword">var</span> $a;</span><br><span class="line"><span class="keyword">var</span> a$b_c;</span><br><span class="line"><span class="keyword">var</span> a01;</span><br><span class="line"><span class="keyword">var</span> a$<span class="number">01</span>_02_$;</span><br><span class="line"><span class="comment">// 以上这些都是可以的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var 23a;</span></span><br><span class="line"><span class="comment">// var ^a;</span></span><br><span class="line"><span class="comment">// var %b32;</span></span><br><span class="line"><span class="comment">// 上面这些注释起来的都是不可以的</span></span><br></pre></td></tr></table></figure><ul><li>变量名里面可以有数字，但是不能以数字开头</li><li>变量名里面可以有特殊符号，但是只能有 <code>_</code> 和 <code>$</code> 两种，别的符号出现都是错的</li></ul></li><li><p>变量名不能是一些关键字或者保留字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="comment">// 变量名定义成一些单词是可以的，但是有一些单词就不可以使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="comment">// var this;</span></span><br><span class="line"><span class="comment">// var for;</span></span><br><span class="line"><span class="comment">// var function;</span></span><br><span class="line"><span class="comment">// var class;</span></span><br><span class="line"><span class="comment">// 上买注释起来的这些就不能使用，当然还有很多</span></span><br></pre></td></tr></table></figure><ul><li>什么是关键字：在 ECMAScript 制定语法规则的时候，会把一些单词拿出来定义成关键字，比如：<br><code>var</code>：定义变量的关键字<br><code>for</code>：定义循环的关键字<br><code>while</code>：定义循环的关键字<br><code>function</code>：定义函数的关键字<br>…… 还有很多</li><li>什么是保留字：就是 ECMAScript 规定了一些有意义的单词，留待他以后升级规则的时候使用，也不让我们当作变量名来使用，比如：<br><code>byte</code> / <code>debugger</code> / <code>static</code> / <code>boolean</code> / ……<br>其实就是他预留下来以后归ECMAScript使用而已，有些其实也没有硬性规定不让使用，只是我们在使用的时候都默认避开这些<br>还有一些其实现在的 <code>es6</code> 中就已经在使用了，以后我们慢慢都会学到，这些也不用刻意去记，一般不会影响我们的开发的</li><li>其实关键字和保留字也不多，一共几十个而已，因为随着改版和升级，会有一些变化，所以这里就不整理了，自行<a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=JS%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E4%BF%9D%E7%95%99%E5%AD%97" target="_blank" rel="noopener">百度一下JS中的保留字和关键字</a>就好</li></ul></li><li><p>JS中的变量名严格区分大小写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="keyword">var</span> Num;</span><br><span class="line"><span class="keyword">var</span> nUm;</span><br><span class="line"><span class="keyword">var</span> nuM;</span><br><span class="line"><span class="keyword">var</span> nUM;</span><br><span class="line"><span class="keyword">var</span> NUm;</span><br><span class="line"><span class="comment">// 上面书写的是六个不同的变量名，不是一个</span></span><br></pre></td></tr></table></figure><ul><li>在JS中，变量名是很严格的，定义的时候是大写字母，使用的时候就要是大写字母</li><li>如果你在定义的时候写的是 <code>var num = 10;</code> 而使用的时候是 <code>window.alert(NUM)</code>，那么是不会得到结果的</li></ul></li></ol><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>接下来讲一讲命名规范</li><li>这个规范不是官方定制的，可以不去遵守，只是开发者大家都默认遵守这个规范而已</li></ul><ol><li><p>变量名要有一定的语义化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们定义的变量名尽量有意义，比如：</span></span><br><span class="line"><span class="keyword">var</span> name; <span class="comment">// 可以表示姓名/名称之类的意思</span></span><br><span class="line"><span class="keyword">var</span> content; <span class="comment">// 可以表示内容/文章之类的意思</span></span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">// 可以表示年龄的意思</span></span><br><span class="line"><span class="comment">// ...等等诸如此类的</span></span><br></pre></td></tr></table></figure><ul><li>尽量让你的代码可阅读性变得更高，不要总是使用 <code>a01</code> / <code>a02</code> / <code>div001</code> / … 之类的名称</li><li>方便别人阅读，也方便自己维护和修改，不然你定义完变量名，过两天自己看的时候肯能都不认识了</li></ul></li><li><p>驼峰命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 驼峰命名法定义的变量</span></span><br><span class="line"><span class="keyword">var</span> userName;</span><br><span class="line"><span class="keyword">var</span> userPass;</span><br></pre></td></tr></table></figure><ul><li>当一个变量名由两个或者多个单词组合而成的时候，从第二个单词开始首字母大写</li><li>当然这个不是硬性规定，不这么写也没事，但是大家都这么写，我们还是不要特立独行了</li></ul></li><li><p>下划线分割</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用下划线分割的方式定义的变量</span></span><br><span class="line"><span class="keyword">var</span> user_name;</span><br><span class="line"><span class="keyword">var</span> user_pass;</span><br></pre></td></tr></table></figure><ul><li>在这里要特别说一下这个方法，这个不是大家都默认的写法，但也是大家可以认可的写法</li><li>这个方法其实不作为规范的一种，但是也有相当一部分开发人员是喜欢这样书写变量名的，只是不如使用驼峰命名的人多</li><li>这个随自己的喜好就好，喜欢哪种就用哪种，都是可以的，但是一定要选择一种去养成习惯</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>变量名的命名规则是由官方（ECMAScript）提出，所有开发者必须遵守，不然就无法正常运行程序</li><li>变量名的命名规范是由社区（开发者默认）提出，大家自觉遵守的，不遵守也不会报错</li><li>从定义变量名这件小事开始，养成一个良好的书写习惯，如果能做到 “代码洁癖” 就是最好的了</li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node.js安装</title>
      <link href="/2016/01/05/Node-js%E5%AE%89%E8%A3%85/"/>
      <url>/2016/01/05/Node-js%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="安装NodeJS运行环境"><a href="#安装NodeJS运行环境" class="headerlink" title="安装NodeJS运行环境"></a>安装NodeJS运行环境</h1><h2 id="For-Window"><a href="#For-Window" class="headerlink" title="For Window"></a>For Window</h2><h3 id="下载node安装包"><a href="#下载node安装包" class="headerlink" title="下载node安装包"></a>下载node安装包</h3><ul><li>下载安装包以前要先知道自己的电脑是 32 位的系统，还是 64 位的系统</li><li>可以选择node官网下载<br><a href="https://nodejs.org" target="_blank" rel="noopener">node官网</a></li><li>也可以直接点击下面的连接直接下载<br><a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi" target="_blank" rel="noopener">32位系统下载地址</a><br><a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi" target="_blank" rel="noopener">64位系统下载地址</a></li><li>如果需要node的历史版本，下面的连接会帮到你<br><a href="https://nodejs.org/dist/" target="_blank" rel="noopener">node历史版本</a></li></ul><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>本文实例以 v0.10.26 版本为例，其他版本类似，安装步骤：</p><ol><li>双击下载后的安装包 v0.10.26，如下所示：<br><img src="/img/node安装/node安装001.png" alt="node安装001"></li><li>点击以上的Run(运行)，将出现如下界面，直接点击 next：<br><img src="/img/node安装/node安装002.png" alt="node安装002"></li><li>勾选接受协议选项，点击 next（下一步）按钮：<br><img src="/img/node安装/node安装003.png" alt="node安装003"></li><li>Node.js默认安装目录为 “C:\Program Files\nodejs\”，你可以修改目录（建议不要修改），并点击 next（下一步）：<br><img src="/img/node安装/node安装004.png" alt="node安装004"></li><li>点击树形图标来选择你需要的安装模式，然后点击下一步 next（下一步）：<br><img src="/img/node安装/node安装005.png" alt="node安装005"></li><li>点击 Install（安装）开始安装Node.js，你也可以点击 Back（返回）来修改先前的配置，然后并点击 next（下一步）：<br><img src="/img/node安装/node安装006.png" alt="node安装006"></li><li>安装过程：<br><img src="/img/node安装/node安装007.png" alt="node安装007"></li><li>安装完成，点击 Finish（完成）按钮退出安装向导<br><img src="/img/node安装/node安装008.png" alt="node安装008"></li></ol><ul><li>nodeJS已经安装完成了</li><li>接下来就是检测一下有没有安装成功</li></ul><h3 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h3><ul><li>要在控制台检测一下是否安装成功</li><li>点击 <code>开始 =&gt; 运行 =&gt; 输入 &quot;cmd&quot; =&gt; 敲击回车</code>，打开控制台</li><li>输入命令 <code>path</code> 敲击回车，输出结果如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PATH=C:\oraclexe\app\oracle\product\10.2.0\server\bin;C:\Windows\system32;</span><br><span class="line">C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;</span><br><span class="line">c:\python32\python;C:\MinGW\bin;C:\Program Files\GTK2-Runtime\lib;</span><br><span class="line">C:\Program Files\MySQL\MySQL Server 5.5\bin;C:\Program Files\nodejs\;</span><br><span class="line">C:\Users\rg\AppData\Roaming\npm</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li>我们可以看到环境变量中已经包含了C:\Program Files\nodejs\</li><li>这就证明安装成功了</li><li>安装node会自动安装好 <code>npm</code> 包管理器，可能一些node的历史版本不会自动安装，如果需要 <code>npm</code> 包管理器，可以手动安装</li><li>有了 <code>npm包管理器</code> 以后，我们的开发就变得方便了很多</li></ul></blockquote><h3 id="检测安装版本"><a href="#检测安装版本" class="headerlink" title="检测安装版本"></a>检测安装版本</h3><ul><li>和之前一样，要在控制台检测已经安装的版本</li><li>点击 <code>开始 =&gt; 运行 =&gt; 输入 &quot;cmd&quot; =&gt; 敲击回车</code>，打开控制台</li><li>输入命令 <code>node --version</code> 敲击回车，输出结果如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v0.10.26</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li>这就就是你安装的node的版本号</li><li>版本号可能和我的不一样，但是有版本号就可以了</li></ul></blockquote><ul><li>到此，window系统下的nodeJS的安装就算是完成了</li></ul><h2 id="For-MAC"><a href="#For-MAC" class="headerlink" title="For MAC"></a>For MAC</h2><h3 id="下载node安装包-1"><a href="#下载node安装包-1" class="headerlink" title="下载node安装包"></a>下载node安装包</h3><ul><li>可以直接访问<a href="https://nodejs.org/" target="_blank" rel="noopener">node官网</a>下载<br><img src="/img/node安装/node安装009.png" alt="node安装009"></li><li>下载后会有一个 <code>.pkg</code> 的安装包</li></ul><h3 id="安装node-1"><a href="#安装node-1" class="headerlink" title="安装node"></a>安装node</h3><ul><li>双击安装包，按照步骤一直下一步就好<br><img src="/img/node安装/node安装010.png" alt="node安装010"></li><li>到这里就安装完成了</li><li>接下来就是检测安装是否成功了</li></ul><h3 id="检测是否安装成功和版本号"><a href="#检测是否安装成功和版本号" class="headerlink" title="检测是否安装成功和版本号"></a>检测是否安装成功和版本号</h3><ul><li>打开终端<br><img src="/img/node安装/node安装011.png" alt="node安装011"></li><li>输入指令 <code>node -v</code>，会输出版本号<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v8.11.1</span><br></pre></td></tr></table></figure></li></ul><ul><li>然后输入指令 <code>npm -v</code>，一样会输出版本号，这个就是安装node时候自动安装的 <code>npm</code> 包管理器<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.6.0</span><br></pre></td></tr></table></figure></li></ul><ul><li>版本号可能和我的不一样，但是有版本号就可以了</li></ul><h2 id="nodeJS初体验"><a href="#nodeJS初体验" class="headerlink" title="nodeJS初体验"></a>nodeJS初体验</h2><ol><li>新建一个 <code>nodeTest.js</code> 文件，在里买写下如下代码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span> : <span class="string">"text/plain"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    response.write(<span class="string">"Welcome to Nodejs"</span>);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;).listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Creat server on http://127.0.0.1:8000/"</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>打开控制台（window）或者终端（MAC），cd 到刚才这个 <code>nodeTest.js</code> 文件所在的文件夹，输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node nodeTest.js</span><br></pre></td></tr></table></figure><ul><li>不要关闭终端，打开浏览器，访问 <code>http://127.0.0.1:8000</code> 或者 <code>http://localhost:8000</code></li><li>页面上会显示 <code>Welcome to Nodejs</code></li><li>测试成功，可以关闭网页和终端了</li></ul></li></ol>]]></content>
      
      <categories>
          
          <category> Development Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的数据类型</title>
      <link href="/2016/01/04/JS%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2016/01/04/JS%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="JS中的数据类型"><a href="#JS中的数据类型" class="headerlink" title="JS中的数据类型"></a>JS中的数据类型</h1><ul><li>在JS中，数据类型分成两类<ul><li>基本数据类型（简单数据类型）</li><li>引用数据类型（复杂数据类型）</li></ul></li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>基本数据类型，也叫值类型</li><li>都是由一些简单的东西拼接起来</li></ul><ol><li><p>数值（Number）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><ul><li>其实就是一些表示数字的方法而已</li></ul></li><li><p>字符串（String）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br></pre></td></tr></table></figure><ul><li>所有用 <code>&#39;</code> 或者 <code>&quot;</code> 包裹起来的东西都叫做字符串</li><li>在JS中给我们推荐使用单引号</li></ul></li><li><p>布尔（Boolean）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boo = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ul><li>就是真或者假，也就是我们所说的 <code>true</code> 和 <code>false</code></li><li>在JS中，布尔值只有这两个</li></ul></li><li><p>空（Undefined）</p><ul><li>这个数据类型的值只有一个，就是 <code>undefined</code>，表示空的意思</li><li>其实就是本来这里应该给我一个值，但是没有给我，那么就是 <code>undefined</code></li></ul></li><li><p>空（Null）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>这个数据类型的值也是只有一个，就是 <code>null</code>，他也是空的意思</li><li>但是他只直接给一个变量赋值为空，实际上是有值，只不过这个值就是空</li></ul></li></ol><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><ul><li>引用数据类型就是开辟一个空间，在空间里面存储一些值，这些值可以是一个基本数据类型，也可以是一个引用数据类型</li><li>而赋值给变量名的不过就是这个空间的地址而已</li><li>在JS中，我们的引用数据类型官方给出的只有一个 Object</li><li>其他的一些都是JS中的内置对象而已</li><li>接下来就介绍一些内置对象</li></ul><ol><li><p>对象（Object）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  num: <span class="number">1</span>,</span><br><span class="line">  str: <span class="string">'abc'</span>,</span><br><span class="line">  boo: <span class="literal">true</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个是一个对象数据类型，在定义的时候以 <code>{}</code> 包裹</li><li>里面以键值对的形式出现，以 <code>:</code> 分开键值对，以 <code>,</code> 分割每一对键值对</li></ul></li><li><p>数组（Array）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'abc'</span>, <span class="literal">true</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;]</span><br></pre></td></tr></table></figure><ul><li>这是一个数组数据类型，就是把所有数据有序的放在一个空间内，顺序就是数组的索引（index），从 0 开始</li><li>里面的每一项都是一个数据，以 <code>,</code> 分割</li><li>其实数组也是键值对的形式，只不过它的键就是数组中对应的索引下标（index）</li><li>也就是说 数组0 对应 1，数组1 对应 2，数组2 对应 3，数组3 对应 ‘abc’…</li></ul></li><li><p>函数（Function）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'我是一个函数'</span> );</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>这就是一个函数，函数分成两个阶段，定义阶段和调用阶段</li><li>定义阶段使用 <code>function</code> 关键字来定义，调用阶段直接 <code>函数名()</code> 就可以调用了</li><li>其实就是一个代码块而已，只不过是把一段代码放在一个容器里，想什么时候使用，直接调用，那么函数体里面的代码就会在哪里执行</li></ul></li><li><p>正则（RegExp）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d+$/</span></span><br></pre></td></tr></table></figure><ul><li>这个是一个正则数据类型，正则一般是用来进行检验字符串的，看看输入的字符串是否符合我的规则</li><li>这个是一个检测数字的正则，其实就是用两个 <code>/</code> 包裹，里面写一些有意义的特殊的字符，组合起来就叫正则</li></ul></li><li><p>…</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>这里只是大致的说一下，有个了解就好，我会在之后的文章中详细解释每一种数据类型的用法</li><li>现在只要了解都有什么就好了</li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的变量</title>
      <link href="/2016/01/04/JS%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/"/>
      <url>/2016/01/04/JS%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h1 id="在JS中的变量初始化"><a href="#在JS中的变量初始化" class="headerlink" title="在JS中的变量初始化"></a>在JS中的变量初始化</h1><ul><li>首先要说，JavaScript 是一个弱类型的语言，在定义变量的时候就有体现</li><li>比如在 JAVA/C++ 等语言中，一个变量在声明的时候就被限制了类型，只能是数字/字符串/对象等等</li><li>但是在 JavaScript 中并没有，仅仅只是声明了一个变量名称而已，想是什么就是什么，没有任何限制，更改的时候也没有任何的限制</li><li>变量就是在我们程序运行的过程中帮我们存储一些数据的东西而已，并不复杂</li></ul><h2 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h2><ul><li>声明变量使用 <code>var</code> 关键字，当书写 <code>var</code> 的时候，就表示接下来我要声明变量了</li></ul><ol><li><p>声明一个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这就是在声明一个变量</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br></pre></td></tr></table></figure><ul><li>这就是在内存中声明了一个 <code>a</code> 变量，可以使用这个变量了</li></ul></li><li><p>同时声明多个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是同时声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> b, c, d;</span><br></pre></td></tr></table></figure><ul><li>这就是同时声明多个变量</li><li>声明多个变量的时候，每个变量名之间用 <code>,</code> 分隔，结束的时候用 <code>;</code></li></ul></li></ol><h2 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h2><ul><li>变量声明以后，其实就可以直接使用了，但是没有任何意义，因为这个变量什么也代表不了</li><li>我们需要给这个变量赋值以后，他就变得有意义了，这个时候我们再使用就好了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个变量 a</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// 给 a 这个变量赋值</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 再给 a 赋值操作以后，再使用 a 的时候，其实就是在使用 10 这个数字</span></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="built_in">window</span>.alert( a + <span class="number">10</span> );</span><br><span class="line"><span class="comment">//=&gt; 输出结果就是 20</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>需要注意的一点就是，在JS中 <code>=</code> 的含义不是 “等于” 的意思，而是 “赋值” 的意思</li><li>就是将 <code>=</code> 右边的 内容或者运算结果 给到 <code>=</code> 左边的变量名里面储存起来，我们管这个行为叫做赋值行为</li><li>变量不光可以赋一个简单的数字，还可以是一个数学运算的结果<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// 变量保存一个运算结果</span></span><br><span class="line">a = <span class="number">10</span> + <span class="number">10</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 这个时候再使用 a 就是在使用 30 这个数字</span></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="built_in">window</span>.alert( a + <span class="number">10</span> );</span><br><span class="line"><span class="comment">//=&gt; 输出结果就是 40</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>一个变量名永远只能存储一个值，这个值可以是直接给出的，也可以是一个运算结果，但是绝对不可能出现一个变量名同时存储两个或以上值的情况<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 这里，使用 a 的时候就是在使用 10</span></span><br><span class="line"><span class="built_in">window</span>.alert( a ); </span><br><span class="line"><span class="comment">//=&gt; 结果是 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当下面这句代码执行完毕以后，那么 a 变量里面存储的值就再也不是 10 了，而变成了 20</span></span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">window</span>.alert( a );</span><br><span class="line"><span class="comment">//=&gt; 结果是 20</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>目前看来，变量只能存储一个简单的数字，但是其实不是，只是我们还没有学到而已</li><li>变量可以储存一切JavaScript里面的数据</li></ul><h2 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h2><ul><li>刚才经历了变量的 声明 和 赋值，其实还有一个就是”变量的初始化”</li><li>其实初始化是再简单不过的了，初始化的含义就是把变量的声明和赋值同时进行就可以了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这就是在做变量的初始化</span></span><br><span class="line"><span class="comment">// 其实就是在声明一个变量的同时给他赋值而已</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 做完这个操作以后，在内存中就有了一个变量 a，并且 a 变量的值是 10</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>上面是对一个变量进行了初始化</li><li>我们既然可以同时声明多个变量，那么就可以同时初始化多个变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个就是同时初始化多个变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>, b = <span class="number">20</span>, c = <span class="number">30</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>上面就是同时初始化多个变量</li><li>每一个初始化的中间用 <code>,</code> 分隔，结尾的地方用 <code>;</code></li><li>有的时候，可能一个变量存储的东西比较长，那么在用 <code>,</code> 分隔的时候，是可以换行的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量的初始化可以换行书写，但是注意一下，换行的时候要用 `,`，不要用 `;`，不然就不是初始化了</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span> + <span class="number">10</span> + <span class="number">10</span>,</span><br><span class="line">    b = <span class="number">20</span> + <span class="number">20</span> + <span class="number">20</span>,</span><br><span class="line">    c = <span class="number">30</span> + <span class="number">30</span> + <span class="number">30</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>在JS代码中，变量就是帮我们储存一些数据，可以是一个简单的值，也可以是一个运算的结果（这里的运算不光只是数学运算，还有以后我们用代码进行的运算）</li><li>变量可以一次一个的声明，也可以一次多个的声明，中间用 <code>,</code> 分隔</li><li>变量的初始化就是在声明的同时对其进行赋值，可以是一次一个，也可以是一次多个，中间用 <code>,</code> 分隔</li><li>在JavaScript中，一个 <code>=</code> 的含义是 “赋值” 不是 “等于”</li><li>最最重要的就是，一个变量名只能有一个值，绝对不能有两个或以上的值同时存在，当第二次给同一个变量名赋值的时候，第一次赋值就会被覆盖</li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的注释</title>
      <link href="/2016/01/03/JS%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A/"/>
      <url>/2016/01/03/JS%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A/</url>
      <content type="html"><![CDATA[<h1 id="在JS代码中的注释"><a href="#在JS代码中的注释" class="headerlink" title="在JS代码中的注释"></a>在JS代码中的注释</h1><ul><li>要学习一门语言，先要学习注释，因为首先要知道，哪些是有意义的代码，哪些是给开发者看的注释，</li><li>只有分清楚了代码和注释，才能看得懂别人的代码，看别人的代码也是一种学习的过程</li><li>一般来说，注释是对一行或一段代码的解释，为了别的人可以看得懂我们写的是什么</li><li>所有注释的内容都不会在JS代码执行的过程中执行出来，只是给开发者看的</li></ul><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是一个单行注释</span></span><br><span class="line"><span class="comment">// 想换行的话，必须换行以后在写一个 "双斜线"</span></span><br><span class="line"><span class="comment">// 一般来说，一个单行注释都是用来说明下面这一行代码是什么意思</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在浏览器弹出提示框实现 Hello JS! 文本</span></span><br><span class="line"><span class="built_in">window</span>.alert( <span class="string">'Hello JS!'</span> )</span><br></pre></td></tr></table></figure><ul><li>书写方法就是写两个双斜线 “//“</li><li>还有一种就是 ctrl + / </li></ul><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  我是一个多行注释</span></span><br><span class="line"><span class="comment">  只要在两个标识符中间，可以任意换行书写</span></span><br><span class="line"><span class="comment">  一般来说，这种多行注释会出现在一个JS文件的最上面</span></span><br><span class="line"><span class="comment">  用来说明这个文件的作者，时间，大概的作用，版本号等等的信息</span></span><br><span class="line"><span class="comment">  还有就是做一些比较长的说明和注释一些代码使用</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>书写方法就是写 “/*” 之后直接敲击回车就好了</li><li>还有一种就是 ctrl + shift + /</li></ul><h2 id="模块注释"><a href="#模块注释" class="headerlink" title="模块注释"></a>模块注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 我是一个模块注释</span></span><br><span class="line"><span class="comment">* 和多行注释没有什么区别，就是每一行前面多了一个 星星</span></span><br><span class="line"><span class="comment">* 一般是用来多接下来的一段代码进行说明使用</span></span><br><span class="line"><span class="comment">* 这里因为我们还没有学习具体代码，就不做说明了</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><ul><li>书写方式就是直接写 “/**/“ 以后，把光标放在两个 星号 中间的位置敲击回车</li><li>这种注释有的编辑器核能不能直接写出来，需要一个插件</li></ul><h2 id="函数注释"><a href="#函数注释" class="headerlink" title="函数注释"></a>函数注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  下面这个注释是一个函数说明注释</span></span><br><span class="line"><span class="comment">  主要是用来说明函数的各个参数是什么意思，有什么要求</span></span><br><span class="line"><span class="comment">  函数的返回值是什么</span></span><br><span class="line"><span class="comment">  还有函数功能的描述</span></span><br><span class="line"><span class="comment">  现在我们没有学习函数是什么，只要知道有这样一个注释就可以了</span></span><br><span class="line"><span class="comment">  将来学习到函数的时候就明白是怎么回事了</span></span><br><span class="line"><span class="comment">  最下面的代码就是一个函数，现在不需要去理解，看看就行了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这里一般写函数功能或者函数名称</span></span><br><span class="line"><span class="comment">* @param a 第一个参数的说明</span></span><br><span class="line"><span class="comment">* @param b 第二个参数的说明</span></span><br><span class="line"><span class="comment">* @returns &#123;*&#125; 返回值的说明</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"> a, b </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>书写方式就是写 “/**” 之后直接敲击回车，但是前提是一定要在一个函数的上面，不然不会出现</li><li>这个注释域地编辑器也是不能直接出来，需要安装插件</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>一共学了四种JS代码中的注释</li><li>单行注释/多行注释/模块注释/函数说明注释<ol><li>单行注释 <code>ctrl + /</code> 或者直接写 <code>//</code></li><li>多行注释 <code>ctrl + shift + /</code> 或者直接写 <code>/* + 回车</code></li><li>模块注释 <code>/**/ + 两个星号中间敲击回车</code></li><li>函数注释 <code>/** + 回车</code>，前提是一定要写在一个函数的上面</li></ol></li><li>单行注释/多行注释 所有编辑器都有，模块注释/函数说明注释 有的编辑器需要插件支持</li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在HTML页面引入JavaScript</title>
      <link href="/2016/01/02/%E5%A6%82%E4%BD%95%E5%9C%A8HTML%E9%A1%B5%E9%9D%A2%E5%BC%95%E5%85%A5JavaScript/"/>
      <url>/2016/01/02/%E5%A6%82%E4%BD%95%E5%9C%A8HTML%E9%A1%B5%E9%9D%A2%E5%BC%95%E5%85%A5JavaScript/</url>
      <content type="html"><![CDATA[<h1 id="让JavaScript语句在HTML跑起来"><a href="#让JavaScript语句在HTML跑起来" class="headerlink" title="让JavaScript语句在HTML跑起来"></a>让JavaScript语句在HTML跑起来</h1><ul><li>我们学习和书写JS代码的目的就是让它们可以在页面中出现效果，接下来我们就讲讲如何让一段JS代码在页面中产生效果</li></ul><h2 id="CSS样式引入页面"><a href="#CSS样式引入页面" class="headerlink" title="CSS样式引入页面"></a>CSS样式引入页面</h2><ul><li>在我们将JS代码引入页面之前，先来看看CSS样式是怎么在页面中生效的</li></ul><ol><li>行内式CSS样式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 行内式直接书写在对应的标签内 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: yellow"</span>&gt;</span> 行内式CSS样式 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>内嵌式CSS样式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内嵌式写在style标签内，按照选择器作用在对应的元素上 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div &#123;</span></span><br><span class="line"><span class="undefined">     font-size: 20px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: yellow"</span>&gt;</span> 行内式CSS样式 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>外链式CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css.css文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    外链式CSS样式使用link标签的href属性引入一个css文件 </span></span><br><span class="line"><span class="comment">    在css文件中书写css样式，依靠选择器作用在对应的元素上</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css.css"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内嵌式写在style标签内，按照选择器作用在对应的元素上 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div &#123;</span></span><br><span class="line"><span class="undefined">      font-size: 20px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: yellow"</span>&gt;</span> 行内式CSS样式 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="JS语句引入页面"><a href="#JS语句引入页面" class="headerlink" title="JS语句引入页面"></a>JS语句引入页面</h2><ul><li>其实JS语句引入页面和CSS一样，只是稍有区别而已</li><li>在这之前我们先要了解一条JS语句，因为JS是让页面出现一些效果，所以我们要知道一条语句才好演示<ul><li><code>window.alert( &#39;Hello JS!&#39; )</code></li><li>作用是在浏览器弹出一个提示框，提示框中显示的内容就是<code>Hello JS!</code></li><li>在这里要说一点，如果你想弹出一个数字，那么直接书写就可以了，其余的文本内容都要用单引号 <code>&#39;</code> 或者 <code>&quot;</code> 包裹起来，至于为什么要这样，我们会在讲解字符串的时候讲解，现在先不讨论 </li></ul></li></ul><ol><li>行内式JS代码<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     行内式直接书写在对应的标签内 </span></span><br><span class="line"><span class="comment">     这里需要注意的是，如果写在行内，那么不会打开浏览器的时候就执行</span></span><br><span class="line"><span class="comment">     想要执行JS语句，需要给元素一个触发条件</span></span><br><span class="line"><span class="comment">     我们管这个触发条件叫做事件，行内的JS代码要靠事件触发</span></span><br><span class="line"><span class="comment">     这里我们只初步接触一个事件（点击事件 click）</span></span><br><span class="line"><span class="comment">     现在不用细研究，后面会讲到</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 这时打开页面，当你点击这个div的时候，浏览器就会弹出提示框了 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"window.alert( 'Hello JS!' )"</span>&gt;</span> 行内式JS代码 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>内嵌式JS代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="comment">// 内嵌式JS代码写在script标签内</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// 这里可以不需要事件的形式</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// 当页面打开的时候就会在浏览器弹出提示框</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">window</span>.alert( <span class="string">'Hello JS!'</span> )</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 内嵌式JS代码写在script标签内</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 这里可以不需要事件的形式</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 当页面打开的时候就会在浏览器弹出提示框</span></span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.alert( <span class="string">'Hello JS!'</span> )</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上面两种形式都是内嵌式JS代码的书写形式，都是正确的，只是稍有区别，以后会说道，这里不讨论</li><li>理论上来说，我们的script标签写在页面任何位置都会执行里面的JS代码</li><li>但是一般来说，我们约定俗成的写在 head 标签的末位或者 body 标签的末位</li></ul></li><li><p>外链式JS代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js.js 文件</span></span><br><span class="line"><span class="built_in">window</span>.alert( <span class="string">'Hello JS!'</span> )</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     外链式JS代码，就是将JS代码写在一个JS文件中</span></span><br><span class="line"><span class="comment">     在页面中以 script 标签的 src 属性引入页面</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   外链式JS代码，就是将JS代码写在一个JS文件中</span></span><br><span class="line"><span class="comment">   在页面中以 script 标签的 src 属性引入页面</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里有一点和内嵌式一样，就是一般我们写在 head 标签的末位或者 body 标签的末位</li><li>有一点需要注意，因为 内嵌式 和 外链式 都是用 script 标签，所以，当一个 script 标签当作外链是引入了一个JS文件以后，那么就再也不能当作内嵌式使用了，写在标签对中的任何代码也不会执行</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>至此，我们的JS代码就可以在一个HTML页面中跑起来了</li><li>JS代码引入 HTML 页面有三种方式，行内式/内嵌式/外链式</li><li>行内式 引入的JS代码需要是个事件来触发</li><li>内嵌式 和 外链式 不需要事件，直接就会执行</li><li>内嵌式 和 外链式 都用 script 标签</li><li>内嵌式 和 外链式 我们一般都书写在 head 标签的末位或者 body 标签的末位</li><li>当一个 script 标签当作外链式引入JS文件以后，就不能当作内嵌式使用了</li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript脚本语言</title>
      <link href="/2016/01/01/JavaScript%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
      <url>/2016/01/01/JavaScript%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p><img src="/img/前端.jpg" alt="JavaScript"></p><h2 id="JavaScript-的由来"><a href="#JavaScript-的由来" class="headerlink" title="JavaScript 的由来"></a>JavaScript 的由来</h2><ul><li>Netscape在最初将其脚本语言命名为LiveScript，后来Netscape在与Sun合作之后将其改名为JavaScript。JavaScript最初受Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自Java。JavaScript与Java名称上的近似，是当时Netscape为了营销考虑与Sun微系统达成协议的结果。Java和JavaScript的关系就像张雨和张雨生的关系，只是名字很像<ul><li>Java  服务器端的编程语言</li><li>JavaScript  运行在客户端(浏览器)的编程语言，现在 JS 也可以运行在服务器端（nodeJS）这都是后话了</li><li><blockquote><p>JavaScript的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能   </p></blockquote></li></ul></li></ul><h2 id="JavaScript最初的目的"><a href="#JavaScript最初的目的" class="headerlink" title="JavaScript最初的目的"></a>JavaScript最初的目的</h2><ul><li>最初的目的是为了处理表单的验证操作</li></ul><h2 id="JavaScript现在的意义-应用场景"><a href="#JavaScript现在的意义-应用场景" class="headerlink" title="JavaScript现在的意义(应用场景)"></a>JavaScript现在的意义(应用场景)</h2><ul><li><p>JavaScript 发展到现在几乎无所不能。</p><ol><li>网页特效</li><li>服务端开发(Node.js)</li><li>命令行工具(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova)</li><li>控制硬件-物联网(Ruff)</li><li>游戏开发(cocos2d-js)</li><li>…</li></ol></li></ul><h2 id="JavaScript和HTML、CSS的区别"><a href="#JavaScript和HTML、CSS的区别" class="headerlink" title="JavaScript和HTML、CSS的区别"></a>JavaScript和HTML、CSS的区别</h2><ol><li>HTML：提供网页的结构，提供网页中的内容</li><li>CSS: 用来美化网页</li><li>JavaScript: 可以用来控制网页内容，给网页增加动态的效果</li></ol><h2 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h2><ol><li><p>ECMAScript - JavaScript的核心</p><p>ECMA 欧洲计算机制造联合会</p><p>网景：JavaScript</p><p>微软：JScript</p><p>定义了JavaScript的语法规范  </p><p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p></li><li><p>BOM - 浏览器对象模型</p><p>一套操作浏览器功能的API</p><p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等 </p></li><li><p>DOM - 文档对象模型</p><p>一套操作页面元素的API</p><p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>JavaScript 和 JAVA 没有关系</li><li>JavaScript 就是在客户端（浏览器）的 JavaScript引擎中运行</li><li>JavaScript 的语法规范是 ECMAScript 来制定的</li><li>JavaScript 依靠操作 BOM 和 DOM 来完成一些动态的效果</li></ul>]]></content>
      
      <categories>
          
          <category> Front-end Engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>江湖闲散人员 -- 郭翔</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="针对所有观看人员"><a href="#针对所有观看人员" class="headerlink" title="针对所有观看人员"></a>针对所有观看人员</h2><ul><li>本博客旨在帮助小白从头开始学习前端，非商业盈利目的</li><li>本博客中所有文章的时间全部都是本人瞎写的，只是为了排版文章顺序而已</li><li>本人能力有限，可能有些地方书写不很严谨，领会精神就好</li><li>本博客中内容适合正在学习中的新手使用，老鸟请绕行（怕你笑出声）</li><li>本博客中所有内容皆为本人书写，如有不到之处，望请指出</li><li>因为本人不是技术大牛，所以请不要转载或复制本博客内容，写的不好，复制完被人笑话不要找我，谢谢</li><li>本人邮箱<ul><li><a href="mailto:`guoxiang@itcast.cn" target="_blank" rel="noopener">`guoxiang@itcast.cn</a>`</li><li><a href="mailto:`m13301295501_1@163.com" target="_blank" rel="noopener">`m13301295501_1@163.com</a>`</li></ul></li><li>如有哪些知识点，或者开发软件的使用/配置等问题，本博客没有涉及到，可以发送邮件至本人邮箱</li><li>本博客不定期更新，因为个人懒惰，所以不爱写东西</li><li>如果有什么需要看的，或者想知道的内容，可以发送到我的邮箱，有时间的时候会写的</li></ul>]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[<h1 id="所有文章目录"><a href="#所有文章目录" class="headerlink" title="所有文章目录"></a>所有文章目录</h1><ul><li>此处标出所有文章目录，以供快速查阅</li><li>按照分类（categories）列出</li></ul><table><thead><tr><th>status</th><th>状态</th></tr></thead><tbody><tr><td>finish</td><td>完成</td></tr><tr><td>continue</td><td>未完待续</td></tr><tr><td>not started</td><td>还没开始</td></tr></tbody></table><h2 id="Front-end-Engineer（前端工程师）"><a href="#Front-end-Engineer（前端工程师）" class="headerlink" title="Front-end Engineer（前端工程师）"></a>Front-end Engineer（前端工程师）</h2><table><thead><tr><th>title</th><th>status</th><th>tags</th><th>time</th></tr></thead><tbody><tr><td><a href="/2016/01/01/JavaScript脚本语言/">JavaScript脚本语言</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-01</td></tr><tr><td><a href="/2016/01/02/如何在HTML页面引入JavaScript/">如何在HTML页面引入JavaScript</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-02</td></tr><tr><td><a href="/2016/01/03/JS中的注释/">JS中的注释</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-03</td></tr><tr><td><a href="/2016/01/04/JS中的变量/">JS中的变量</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-04</td></tr><tr><td><a href="/2016/01/05/变量的命名规则和规范/">变量的命名规则和规范</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-05</td></tr><tr><td><a href="/2016/01/04/JS中的数据类型">JS中的数据类型</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-04</td></tr><tr><td><a href="/2016/01/06/JS中的基本数据类型-字符串">JS中的基本数据类型-字符串</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-06</td></tr><tr><td><a href="/2016/01/06/JS中的基本数据类型-数值/">JS中的基本数据类型-数值</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-06</td></tr><tr><td><a href="/2016/01/06/JS中的基本数据类型-布尔/">JS中的基本数据类型-布尔</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-06</td></tr><tr><td><a href="/2016/01/06/JS中的基本数据类型-空/">JS中的基本数据类型-空</a></td><td>continue</td><td>JavaScript基础</td><td>2016-01-06</td></tr><tr><td><a href="/2016/01/07/流程控制/">流程控制</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-07</td></tr><tr><td><a href="/2016/01/07/流程控制之分支结构/">流程控制之分支结构</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-07</td></tr><tr><td><a href="/2016/01/07/流程控制之循环结构/">流程控制之循环结构</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-07</td></tr><tr><td><a href="/2016/01/07/JS中的内置对象-String的常用方法/">JS中的内置对象-String的常用方法</a></td><td>finish</td><td>JavaScript基础</td><td>2016-01-07</td></tr><tr><td><a href="/2016/01/08/解构赋值/">解构赋值</a></td><td>continue</td><td>JavaScript基础</td><td>2016-01-08</td></tr><tr><td><a href="/2016/02/01/布局方式-flex布局/">布局方式-flex布局</a></td><td>continue</td><td>JavaScript基础</td><td>2016-02-01</td></tr></tbody></table><h2 id="Developer-Tools（开发者工具）"><a href="#Developer-Tools（开发者工具）" class="headerlink" title="Developer Tools（开发者工具）"></a>Developer Tools（开发者工具）</h2><table><thead><tr><th>title</th><th>status</th><th>tags</th><th>time</th></tr></thead><tbody><tr><td>WebStorm安装</td><td>not started</td><td>WebStorm</td><td></td></tr><tr><td><a href="/2019/01/01/mongodb数据库安装-MAC/">mongodb数据库安装-MAC</a></td><td>continue</td><td>mongodb</td><td>2020-01-01</td></tr></tbody></table><h2 id="Development-environment（开发环境）"><a href="#Development-environment（开发环境）" class="headerlink" title="Development environment（开发环境）"></a>Development environment（开发环境）</h2><table><thead><tr><th>title</th><th>status</th><th>tags</th><th>time</th></tr></thead><tbody><tr><td><a href="/2016/01/05/Node-js安装/">Node.js安装</a></td><td>finish</td><td>NodeJS</td><td>2016-01-05</td></tr><tr><td><a href="/2016/01/06/git安装和配置/">git安装和配置</a></td><td>finish</td><td>git和github</td><td>2016-01-06</td></tr><tr><td><a href="/2016/01/07/使用git在GitHub上托管代码/">使用git在GitHub上托管代码</a></td><td>finish</td><td>git和github</td><td>2016-01-07</td></tr><tr><td>github的功能介绍</td><td>continue</td><td>git和github</td><td></td></tr><tr><td>git的常用指令</td><td>not started</td><td>git和github</td><td></td></tr><tr><td><a href="/2016/04/11/json-server的配置和使用1/">json-server的配置和使用1</a></td><td>continue</td><td>json-server</td></tr></tbody></table><h2 id="Development-Demo（开发小案例）"><a href="#Development-Demo（开发小案例）" class="headerlink" title="Development Demo（开发小案例）"></a>Development Demo（开发小案例）</h2><table><thead><tr><th>title</th><th>status</th><th>tags</th><th>time</th></tr></thead><tbody><tr><td><a href="/2016/01/06/封装简单版全兼容ajax/">封装简单版全兼容ajax</a></td><td>finish</td><td>Demo</td><td>2016-01-06</td></tr></tbody></table><h2 id="Development-Periphery（开发者周边）"><a href="#Development-Periphery（开发者周边）" class="headerlink" title="Development Periphery（开发者周边）"></a>Development Periphery（开发者周边）</h2><table><thead><tr><th>title</th><th>status</th><th>tags</th><th>time</th></tr></thead><tbody><tr><td><a href="/2016/01/07/unicode字符集/">unicode字符集</a></td><td>finish</td><td>unicode字符集</td><td>2016-01-07</td></tr></tbody></table>]]></content>
    </entry>
    
  
</search>
